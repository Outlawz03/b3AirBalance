<?xml version="1.0"?>

<!--[DocumentInformation]
Created: 2012-11-12 15:15
Modified: 2015-04-16 15:37
-->
<?tgml version="1.21"?><Tgml Author="MRB" ComponentCounter="71"
    GridSize="5" Height="800" LayerCounter="9"
    Model="ATB-CLG-PF-mHWRH-PI-SXB" Version="130514" Width="1600">
    <Layer Name="Background">
        <Rectangle Fill="#EEEEEE" Height="740.0" Left="30.0"
            Opacity="1.0" RadiusX="5" RadiusY="5" Stroke="#E0E0E0"
            StrokeDashArray="0.0" StrokeWidth="1.0" Top="30.0" Width="1540.0"/>
        <Rectangle Fill="#2C2D33" Height="40.0" Left="30.0"
            Name="WorkAreaHeader" Opacity="1.0" RadiusX="5" RadiusY="5"
            Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0"
            Top="30.0" Width="1540.0">
            <LinearGradient EndPoint="0.0,1.0">
                <GradientStop Color="#3C3E43" Offset="0"/>
                <GradientStop Color="#2C2D33" Offset="0.035"/>
            </LinearGradient>
            <LinearGradient Attribute="Stroke" EndPoint="0.0,1.0">
                <GradientStop Color="#3C3E43" Offset="0"/>
                <GradientStop Color="#2C2D33" Offset="0.035"/>
            </LinearGradient>
        </Rectangle>
        <Component Clip="False" ContentHeight="24.31"
            ContentWidth="189.65" Height="24.309999999999995"
            Left="52.67997851252556" Name="Title"
            Top="37.84963235855103" Width="189.65">
            <Bind Attribute="" Name="NOTE1"/>
            <Bind Name="NAME"/>
            <Text FontFamily="Verdana" FontSize="20" FontStyle="Normal"
                FontWeight="Normal" HorizontalAlign="Left"
                Left="0.00456428527832" Name="WorkAreaHeaderTitle"
                Opacity="1.0" Stroke="#FFFFFF" TextDecoration="None"
                Top="-0.003335952758789" VerticalAlign="Top"><![CDATA[Air Terminal Boxes]]></Text>
            <Script OnDocumentLoad="load" OnMouseClick="click" OnSignalChange="change"><![CDATA[var unit = "";
var loc = "";
var text = null;

function click(evt){
	evt.preventDefault();
	invoke(evt.getCurrentTarget().getChild("NOTE1").getFullBindName(),"EditProperties");
}

function change(evt) {
	var value = evt.getValue() + "";
	var name = String(evt.getTarget().getAttribute("Name"));
	if(name === "NOTE1") {		
		value !== "" ? loc = value : loc = "Please enter the area served";
	}
	
	if(name === "NAME") {
		unit = value;
	}
	
	if(text) {
		text.setAttribute("Content", unit + ": " + loc);
	}
}

function load(evt) {
	unit = "Unit";	
	text = evt.getCurrentTarget().getElementsByTagName("Text").item(0);
};]]></Script>
        </Component>
    </Layer>
    <Layer Name="Duct">
        <Component ComponentCounter="5" ContentHeight="110"
            ContentWidth="180" Height="110.0" Left="630.0" Name=""
            Top="180.0" Width="275.0">
            <Metadata Name="Version" Value="1.0"/>
            <Rectangle Height="90.0" Left="0.0" Opacity="1.0"
                RadiusX="0.0" RadiusY="0.0" Stroke="None"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="10.0" Width="180.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="0.0" X2="180.0" Y1="10.0" Y2="10.0"/>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="0.0" X2="22.0" Y1="100.0" Y2="100.0"/>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="76.0" X2="180.0" Y1="100.0" Y2="100.0"/>
        </Component>
        <Component ComponentCounter="2" ContentHeight="110"
            ContentWidth="110" Height="110.0" Left="930.0" Name=""
            Top="180.0" Width="110.0">
            <Metadata Name="Version" Value="1.0"/>
            <Path Fill="#87D300"
                PathData="M20.0,10.0 C25.5230002,10.0 30.0,14.4770001 30.0,20.0 M20.0,100.0 C25.5230002,100.0 30.0,95.5230002 30.0,90.0 M30.0,20.0 L30.0,90.0 M30.0,20.0 L20.0,10.0 10.0,10.0 10.0,100.0 20.0,100.0 30.0,90.0 z"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Path>
            <Polygon Fill="#FFFFFF" Opacity="1.0"
                Points="100.0,30.0 30.0,30.0 20.0,40.0 20.0,70.0 30.0,80.0 70.0,80.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Polygon>
            <Path Fill="None"
                PathData="M20.0,10.0 C25.5230002,10.0 30.0,14.4770001 30.0,20.0 M10.0,10.0 L20.0,10.0 M30.0,20.0 L30.0,30.0 100.0,30.0"
                Stroke="#009530" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Path Fill="None"
                PathData="M20.0,100.0 C25.5230002,100.0 30.0,95.5230002 30.0,90.0 M20.0,100.0 L10.0,100.0 M30.0,90.0 L30.0,80.0 70.0,80.0"
                Stroke="#009530" StrokeDashArray="0.0" StrokeWidth="1.0"/>
        </Component>
        <Component Clip="False" ContentHeight="46.0"
            ContentWidth="106.92" Height="46.0" Left="960.0" Top="210.0" Width="106.92000000000007">
            <Metadata Name="Version" Value="1.0"/>
            <Component Clip="False" ContentHeight="26" ContentWidth="55"
                Height="46.0" Left="9.925220947265615"
                Top="-0.001708984375" Width="97.0">
                <Polygon Opacity="1.0"
                    Points="55.000999450683565,13.0 36.00099945068357,0.0 36.00099945068357,6.0 0.000999450683572,6.0 0.000999450683572,20.0 36.00099945068357,20.0 36.00099945068357,26.0"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="1.0,0.0"
                        SpreadMethod="Pad" StartPoint="0.0,0.0">
                        <GradientStop Color="#01FFFFFF" Offset="0.0"/>
                        <GradientStop Color="#42B4E6" Offset="1.0">
                            <Expose ExposedAttribute="Color" Name="Arrow Colour"/>
                        </GradientStop>
                    </LinearGradient>
                </Polygon>
            </Component>
            <Text FontFamily="Arial" FontSize="15" FontStyle="Normal"
                FontWeight="Normal" HorizontalAlign="Right"
                Left="74.19522094726562" Opacity="1.0" Stroke="#000000"
                TextDecoration="None" Top="23.998291015625"
                    VerticalAlign="Middle"><![CDATA[Supply Air]]><Expose
                    ExposedAttribute="Content" Name="Arrow Text"/>
                <Expose ExposedAttribute="Stroke" Name="Text Color"/>
            </Text>
        </Component>
        <Component ComponentCounter="5" ContentHeight="110"
            ContentWidth="180" Height="110.0" Left="800.0" Name=""
            Top="180.0" Width="145.0">
            <Metadata Name="Version" Value="1.0"/>
            <Rectangle Height="90.0" Left="0.0" Opacity="1.0"
                RadiusX="0.0" RadiusY="0.0" Stroke="None"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="10.0" Width="180.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="0.0" X2="180.0" Y1="10.0" Y2="10.0"/>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="0.0" X2="180.0" Y1="100.0" Y2="100.0"/>
        </Component>
        <Component Clip="False" ContentHeight="110.0"
            ContentWidth="335.0" Height="110.0" Left="410.0" Top="270.0"
            Visibility="Hidden" Width="335.0">
            <Bind Name="AppSelect" PreventDefault="True"/>
            <Component Clip="False" ContentHeight="90.0"
                ContentWidth="90.0" Height="90.0" Left="245.0"
                Top="10.0" Width="90.0">
                <Metadata Name="Version" Value="1.0"/>
                <Polygon Fill="None" Opacity="1.0"
                    Points="0.0,0.0 90.0,0.0 10.0,90.0 0.0,90.0"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0,1"
                        SpreadMethod="Pad" StartPoint="0.0,0.0">
                        <GradientStop Color="#FEFEFE" Offset="0.0"/>
                        <GradientStop Color="#C6C9CD" Offset="1.0"/>
                    </LinearGradient>
                </Polygon>
                <Line Opacity="1.0" Stroke="#009530"
                    StrokeDashArray="0.0" StrokeWidth="1.0" X1="10.0"
                    X2="0.0" Y1="90.0" Y2="90.0"/>
                <Line Opacity="1.0" Stroke="#009530"
                    StrokeDashArray="0.0" StrokeWidth="1.0" X1="10.0"
                    X2="90.0" Y1="90.0" Y2="0.0"/>
            </Component>
            <Component ComponentCounter="5" ContentHeight="110"
                ContentWidth="180" Height="110.0" Left="100.0" Name=""
                Top="0.0" Width="145.0">
                <Metadata Name="Version" Value="1.0"/>
                <Rectangle Height="90.0" Left="0.0" Opacity="1.0"
                    RadiusX="0.0" RadiusY="0.0" Stroke="None"
                    StrokeDashArray="0.0" StrokeWidth="1.0" Top="10.0" Width="180.0">
                    <LinearGradient Attribute="Fill" EndPoint="0,1"
                        SpreadMethod="Pad" StartPoint="0.0,0.0">
                        <GradientStop Color="#FEFEFE" Offset="0.0"/>
                        <GradientStop Color="#C6C9CD" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Line Opacity="1.0" Stroke="#009530"
                    StrokeDashArray="0.0" StrokeWidth="1.0" X1="0.0"
                    X2="180.0" Y1="10.0" Y2="10.0"/>
                <Line Opacity="1.0" Stroke="#009530"
                    StrokeDashArray="0.0" StrokeWidth="1.0" X1="0.0"
                    X2="180.0" Y1="100.0" Y2="100.0"/>
            </Component>
            <Component ComponentCounter="2" ContentHeight="110"
                ContentWidth="110" Height="110.0" Left="0.0" Name=""
                Top="0.0" Width="110.0">
                <Metadata Name="Version" Value="1.0"/>
                <Path Fill="#87D300"
                    PathData="M90.0,10.0 C84.477,10.0 80.0,14.477002 80.0,20.0 M90.0,100.0 C84.477,100.0 80.0,95.523002 80.0,90.0 M80.0,20.0 L80.0,90.0 M80.0,20.0 L90.0,10.0 100.0,10.0 100.0,100.0 90.0,100.0 80.0,90.0 z"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0,1"
                        SpreadMethod="Pad" StartPoint="0.0,0.0">
                        <GradientStop Color="#FEFEFE" Offset="0.0"/>
                        <GradientStop Color="#C6C9CD" Offset="1.0"/>
                    </LinearGradient>
                </Path>
                <Polygon Fill="#FFFFFF" Opacity="1.0"
                    Points="10.0,30.0 80.0,30.0 90.0,40.0 90.0,70.0 80.0,80.0 40.0,80.0"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0,1"
                        SpreadMethod="Pad" StartPoint="0.0,0.0">
                        <GradientStop Color="#FEFEFE" Offset="0.0"/>
                        <GradientStop Color="#C6C9CD" Offset="1.0"/>
                    </LinearGradient>
                </Polygon>
                <Path Fill="None"
                    PathData="M90.0,10.0 C84.477,10.0 80.0,14.477002 80.0,20.0 M100.0,10.0 L90.0,10.0 M80.0,20.0 L80.0,30.0 10.0,30.0"
                    Stroke="#009530" StrokeDashArray="0.0" StrokeWidth="1.0"/>
                <Path Fill="None"
                    PathData="M90.0,100.0 C84.477,100.0 80.0,95.523002 80.0,90.0 M90.0,100.0 L100.0,100.0 M80.0,90.0 L80.0,80.0 40.0,80.0"
                    Stroke="#009530" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            </Component>
            <Script OnSignalChange="change"><![CDATA[function change(evt) {
	evt.preventDefault();
	var comp = evt.getCurrentTarget();
	var val = Math.round(+evt.getValue()).toString(2);
	comp.setAttribute("Visibility", val.slice(-2,-1) === "1" ? "Visible" : "Hidden");
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="0.0" ContentWidth="90.0"
            Height="1.0" Left="655.0" Top="280.0" Width="90.0">
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="0.0" X2="90.0" Y1="0.0" Y2="0.0"/>
            <Bind Name="AppSelect" PreventDefault="True"/>
            <Script OnSignalChange="change"><![CDATA[function change(evt) {
	evt.preventDefault();
	var comp = evt.getCurrentTarget();
	var val = Math.round(+evt.getValue()).toString(2);
	comp.setAttribute("Visibility", val.slice(-2,-1) === "1" ? "Hidden" : "Visible");
};]]></Script>
        </Component>
    </Layer>
    <Layer Name="Equipment">
        <Component ComponentCounter="2" ContentHeight="70"
            ContentWidth="40" Height="70.0" Left="890.0" Name=""
            Top="170.0" Width="40.0">
            <Metadata Name="Version" Value="1.0"/>
            <Line Stroke="#626469" StrokeDashArray="0.0"
                StrokeWidth="2.0" X1="20.0" X2="20.0" Y1="20.0" Y2="60.0"/>
            <Line Stroke="#626469" StrokeDashArray="0.0" StrokeWidth="5"
                X1="20.0" X2="20.0" Y1="50.0" Y2="60.0"/>
            <Rectangle Fill="#009530" Height="15.0" Left="10.0"
                RadiusX="2" RadiusY="2" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="5.0" Width="20.0"/>
            <Text FontFamily="Arial" FontSize="10.0" FontStyle="Normal"
                FontWeight="Normal" HorizontalAlign="Center" Left="20.0"
                Opacity="1.0" Stroke="#FFFFFF" TextDecoration="None"
                Top="6.914050102234" VerticalAlign="Top"><![CDATA[T]]></Text>
        </Component>
        <Component Clip="False" ContentHeight="90.0"
            ContentWidth="215.0" Height="90.0" Left="420.0" Top="190.0" Width="215.0">
            <Path Fill="#87D300"
                PathData="M80.0,0.0 C74.47699999999998,0.0 70.0,4.477004000000022 70.0,10.0 M80.0,90.0 C74.47699999999998,90.0 70.0,85.52300500000001 70.0,80.0 M70.0,10.0 L70.0,80.0 M70.0,10.0 L80.0,0.0 90.0,0.0 90.0,90.0 80.0,90.0 70.0,80.0 z"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Path>
            <Rectangle Fill="#FFFFFF" Height="90.0" Left="90.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0" Stroke="None"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="0.0" Width="125.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Polygon Fill="#FFFFFF" Opacity="1.0"
                Points="215.0,20.0 185.0,70.0 30.0,70.0 0.0,20.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="0,1"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#FEFEFE" Offset="0.0"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0"/>
                </LinearGradient>
            </Polygon>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="90.0" X2="215.0" Y1="90.0" Y2="90.0"/>
            <Path Fill="None"
                PathData="M80.0,90.0 C74.47699999999998,90.0 70.0,85.52300500000001 70.0,80.0 M80.0,90.0 L90.0,90.0 M70.0,80.0 L70.0,70.0 30.0,70.0"
                Stroke="#009530" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Path Fill="None"
                PathData="M80.0,0.0 C74.47699999999998,0.0 70.0,4.477004000000022 70.0,10.0 M90.0,0.0 L80.0,0.0 M70.0,10.0 L70.0,20.0 0.0,20.0"
                Stroke="#009530" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="90.0" X2="215.0" Y1="0.0" Y2="0.0"/>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="70.0" X2="215.0" Y1="20.0" Y2="20.0"/>
            <Line Opacity="1.0" Stroke="#009530" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="70.0" X2="185.0" Y1="70.0" Y2="70.0"/>
            <Ellipse Fill="#626469" Height="46.0" Left="140.0"
                Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
                StrokeWidth="1.0" Top="22.0" Width="6.0">
                <Rotate>
                    <Bind Attribute="Angle" Name="DprPosFbk" PreventDefault="True">
                        <ConvertRange AttributeMaxValue="90"
                            AttributeMinValue="0" SignalMaxValue="100" SignalMinValue="0">
                            <Expose ExposedAttribute="SignalMinValue" Name="MinValue"/>
                            <Expose ExposedAttribute="SignalMaxValue" Name="MaxValue"/>
                        </ConvertRange>
                        <Expose ExposedAttribute="Name" Name="BindName"/>
                    </Bind>
                </Rotate>
            </Ellipse>
            <Line Opacity="1.0" Stroke="#626469" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="70.0" X2="70.0" Y1="70.0" Y2="65.0"/>
            <Line Opacity="1.0" Stroke="#626469" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="70.0" X2="70.0" Y1="20.0" Y2="25.0"/>
            <Script OnMouseClick="click" OnSignalChange="change"><![CDATA[function change(evt) {
	evt.preventDefault();
}

function click(evt) {
	evt.preventDefault();
};]]></Script>
        </Component>
        <Component ComponentCounter="2" ContentHeight="70"
            ContentWidth="40" Height="70.0" Left="440.0" Name=""
            Top="190.0" Width="40.0">
            <Metadata Name="Version" Value="1.0"/>
            <Line Stroke="#626469" StrokeDashArray="0.0" StrokeWidth="3"
                X1="20.0" X2="20.0" Y1="20.0" Y2="50.0"/>
            <Line Opacity="1.0" Stroke="#626469" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="21.0" X2="21.0" Y1="50.0" Y2="61.0"/>
            <Rectangle Fill="#009530" Height="15.0" Left="10.0"
                RadiusX="2" RadiusY="2" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="5.0" Width="20.0"/>
            <Text FontFamily="Arial" FontSize="10.0" FontStyle="Normal"
                FontWeight="Normal" HorizontalAlign="Center" Left="20.0"
                Opacity="1.0" Stroke="#FFFFFF" TextDecoration="None"
                Top="6.914050102234" VerticalAlign="Top"><![CDATA[Fl]]></Text>
        </Component>
        <Component ComponentCounter="4" ContentHeight="110"
            ContentWidth="130" ForcedColour="#FFD100" GridSize="10"
            Height="110.0" Left="520.0" Name="" Top="270.0"
            Visibility="Hidden" Width="130.0">
            <Metadata Name="Version" Value="1.0"/>
            <Polygon Fill="#C6C9CD" Opacity="1.0"
                Points="80.0,81.0 41.0,81.0 43.800284147262,76.7999997139 45.900320768357,72.750011920931 47.350332975387,67.949993610383 47.20024752617,62.200024127962 46.0,58.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <Bind Attribute="Fill" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                    <ConvertValue AttributeValue="#C6C9CD" SignalLessOrEqualTo="0"/>
                </Bind>
            </Polygon>
            <Rectangle Fill="#C6C9CD" Height="37.0" Left="78.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0" Stroke="None"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="12.0" Width="38.0">
                <Bind Attribute="Fill" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                    <ConvertValue AttributeValue="#C6C9CD" SignalLessOrEqualTo="0"/>
                </Bind>
            </Rectangle>
            <Ellipse Height="69.0" Left="44.0" Opacity="1.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="12.0" Width="69.0">
                <RadialGradient Attribute="Fill" Focus=".5,.5"
                    RadiusX="0.5" RadiusY="0.5" SpreadMethod="Pad">
                    <GradientStop Color="#FEFEFE" Offset=".6"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0">
                        <Bind Attribute="Color" Name="FanCmd">
                            <Expose ExposedAttribute="Name" Name="Command Bind"/>
                            <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                            <ConvertValue AttributeValue="#C6C9CD" SignalLessOrEqualTo="0"/>
                        </Bind>
                    </GradientStop>
                </RadialGradient>
            </Ellipse>
            <Ellipse Fill="#EEEEEE" Height="44.0" Left="58.0" Name=""
                Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1" Top="25.0" Width="44.0">
                <Bind Color="#F0080E" Fill="#FFD100" Name="FanCmd" Stroke="#42B4E6">
                    <Expose ExposedAttribute="Color" Name="Error Color"/>
                    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
                    <Expose ExposedAttribute="Stroke" Name="Database Color"/>
                    <Expose ExposedAttribute="Name" Name="Feedback Bind"/>
                    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var body;
var HighLightCol="#404040";
var originalBodyColor;

function onLoad(evt)
{
  comp = evt.getCurrentTarget();
  body = comp.getParentNode();
  originalBodyColor=body.getAttribute("Stroke");
}

function onChange(evt)
{
  status = parseInt(evt.getStatus());
  
  bgStroke = setColour(status);
  if (bgStroke=="device"){
  	body.setAttribute("Stroke", originalBodyColor);
 	body.setAttribute("StrokeWidth", "1");
  }
  else{
	  body.setAttribute("Stroke", bgStroke);
	  body.setAttribute("StrokeWidth", "2");
  }
}

function setColour(status){
var col;

  if(status==2){//Value from Device
  	return "device";
  }
  else{
  		if(status==3){//Forced Value
  			return comp.getAttribute("Fill");
  		}
  		else{
  	 		if(status==1){//Database Value
  	 		return comp.getAttribute("Stroke");
  			}
  			else{
  				if(status==0){
  					return comp.getAttribute("Color")
  				}
  			}
  		}
  }

};]]></Script>
                </Bind>
            </Ellipse>
            <Component Clip="False" ContentHeight="41.63"
                ContentWidth="41.63" Height="41.63"
                Left="59.370223159791" Top="26.369987602234" Width="41.63">
                <Path
                    PathData="M20.6300048828125,20.6300048828125 L41.6300038828125,20.6300048828125 M20.6300048828125,20.6300048828125 L34.6300038828125,25.6300048828125 C40.506503882812467,26.72900488281249 41.6300038828125,22.6300048828125 41.6300038828125,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                </Path>
                <Path
                    PathData="M20.6300048828125,20.6300048828125 L41.6300048828125,20.6300048828125 M20.6300048828125,20.6300048828125 L34.6300048828125,25.6300048828125 C40.506504882812465,26.72900488281249 41.6300048828125,22.6300048828125 41.6300048828125,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="45" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.6300048828125,20.6300048828125 L41.6300048828125,20.6300048828125 M20.6300048828125,20.6300048828125 L34.6300048828125,25.6300048828125 C40.506504882812465,26.72900488281249 41.6300048828125,22.6300048828125 41.6300048828125,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="90" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.729004882812546,20.6300048828125 L41.729004882812546,20.6300048828125 M20.729004882812546,20.6300048828125 L34.729004882812546,25.6300048828125 C40.605504882812511,26.72900488281249 41.729004882812546,22.6300048828125 41.729004882812546,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="135" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.998005882812549,20.6300048828125 L41.998005882812549,20.6300048828125 M20.998005882812549,20.6300048828125 L34.998005882812549,25.6300048828125 C40.874505882812514,26.72900488281249 41.998005882812549,22.6300048828125 41.998005882812549,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="180" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.630006882812495,20.72900488281249 L41.630006882812495,20.72900488281249 M20.630006882812495,20.72900488281249 L34.630006882812495,25.72900488281249 C40.506506882812459,26.828004882812479 41.630006882812495,22.72900488281249 41.630006882812495,20.72900488281249"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="225" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.479007882812539,20.998005882812492 L41.479007882812539,20.998005882812492 M20.479007882812539,20.998005882812492 L34.479007882812539,25.998005882812492 C40.3555078828125,27.097005882812482 41.479007882812539,22.998005882812492 41.479007882812539,20.998005882812492"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="270" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.630009882812487,21.630006882812495 L41.630009882812487,21.630006882812495 M20.630009882812487,21.630006882812495 L34.630009882812487,26.630006882812495 C40.506509882812452,27.729006882812484 41.630009882812487,23.630006882812495 41.630009882812487,21.630006882812495"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="315" Center="0.0,0.0"/>
                </Path>
                <Rotate>
                    <Animate Animation="Stop" Attribute="Angle"
                        CalcMode="Linear" Duration="2" From="0" To="360">
                        <Bind Attribute="Animation" Name="FanCmd">
                            <Expose ExposedAttribute="Name" Name="Feedback Bind"/>
                            <ConvertValue AttributeValue="Start" SignalMoreOrEqualTo="1"/>
                            <ConvertValue AttributeValue="Stop" SignalLessOrEqualTo="0"/>
                        </Bind>
                    </Animate>
                </Rotate>
            </Component>
            <Line Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="80.0" X2="98.0" Y1="47.0" Y2="59.0"/>
            <Line Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="80.0" X2="80.0" Y1="47.0" Y2="26.0"/>
            <Ellipse Fill="None" Height="44.0" Left="58.0" Name=""
                Opacity="1.0" Stroke="#F0080E" StrokeDashArray="0.0"
                StrokeWidth="2" Top="25.0" Visibility="Hidden" Width="44.0"/>
            <Ellipse Fill="#EEEEEE" Height="20.0" Left="70.0"
                Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" Top="37.0" Width="20.0"/>
            <Ellipse Fill="#DFE0E2" Height="22.0" Left="15.0"
                Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
                StrokeWidth="1.0" Top="56.0" Width="22.0">
                <Bind Attribute="Fill" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                    <ConvertValue AttributeValue="#DFE0E2" SignalLessOrEqualTo="0"/>
                </Bind>
            </Ellipse>
            <Path Fill="None"
                PathData="M113.0,49.0 L115.0,49.0 M79.0,12.0 L115.0,12.0 M45.0,55.0 C42.514,46.97 43.541,35.91 50.0,27.0 56.933000000000007,17.435 68.978,12.145 78.0,12.0 M113.0,49.0 C113.0,66.673 96.435,81.0 76.0,81.0 M45.0,55.0 C46.198,57.8640001 48.592,63.592 48.0,68.0 47.345,72.878 43.115,78.293 41.0,81.0 M37.0,67.0 C37.0,73.075 32.075,78.0 26.0,78.0 19.925,78.0 15.0,73.075 15.0,67.0 15.0,60.925 19.925,56.0 26.0,56.0 32.075,56.0 37.0,60.925 37.0,67.0 z"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1">
                <Bind Color="#F0080E" Fill="#FFD100" Name="FanCmd" Stroke="#42B4E6">
                    <Expose ExposedAttribute="Color" Name="Error Color"/>
                    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
                    <Expose ExposedAttribute="Stroke" Name="Database Color"/>
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var body;
var HighLightCol="#404040";
var originalBodyColor;

function onLoad(evt)
{
  comp = evt.getCurrentTarget();
  body = comp.getParentNode();
  originalBodyColor=body.getAttribute("Stroke");
}

function onChange(evt)
{
  status = parseInt(evt.getStatus());
  
  bgStroke = setColour(status);
  if (bgStroke=="device"){
  	body.setAttribute("Stroke", originalBodyColor);
 	body.setAttribute("StrokeWidth", "1");
  }
  else{
	  body.setAttribute("Stroke", bgStroke);
	  body.setAttribute("StrokeWidth", "2");
  }
}

function setColour(status){
var col;

  if(status==2){//Value from Device
  	return "device";
  }
  else{
  		if(status==3){//Forced Value
  			return comp.getAttribute("Fill");
  		}
  		else{
  	 		if(status==1){//Database Value
  	 		return comp.getAttribute("Stroke");
  			}
  			else{
  				if(status==0){
  					return comp.getAttribute("Color")
  				}
  			}
  		}
  }

};]]></Script>
                </Bind>
            </Path>
            <Path Fill="None"
                PathData="M113.0,49.0 L115.0,49.0 M79.0,12.0 L115.0,12.0 M45.0,55.0 C42.514,46.97 43.541,35.91 50.0,27.0 C56.933,17.435 68.978,12.145 78.0,12.0 M113.0,49.0 C113.0,66.673 96.435,81.0 76.0,81.0 M45.0,55.0 C46.198,57.864 48.592,63.592 48.0,68.0 C47.345,72.878 43.115,78.293 41.0,81.0 M37.0,67.0 C37.0,73.075 32.075,78.0 26.0,78.0 C19.925,78.0 15.0,73.075 15.0,67.0 C15.0,60.925 19.925,56.0 26.0,56.0 C32.075,56.0 37.0,60.925 37.0,67.0 z"
                Stroke="#F0080E" StrokeDashArray="0.0" StrokeWidth="2" Visibility="Hidden"/>
            <Rectangle Fill="#404040" Height="39.0" Left="116.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="11.0" Width="2.0"/>
            <Rectangle Height="21.0" Left="10.0" Opacity="1.0"
                RadiusX="2" RadiusY="2" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1" Top="78.0"
                Visibility="Visible" Width="107.0">
                <LinearGradient Attribute="Fill" EndPoint="0.0,1.0"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#EFEFEF" Offset="0.0"/>
                    <GradientStop Color="#DFE0E2" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Curve Opacity="1.0"
                Points="76.0,38.0 88.0,33.0 96.0,51.0 84.0,56.0"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Rectangle Fill="#9FA0A4" Height="88.0" Left="119.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                Stroke="#9FA0A4" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="11.0" Width="3.0"/>
            <Line Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="80.0" X2="61.0" Y1="47.0" Y2="58.0"/>
            <Curve Opacity="1.0"
                Points="23.0,61.0 18.0,62.0 16.0559310913086,75.02082824707 28.0,74.0 85.0,56.0 28.0,74.0 85.0,56.0 95.0,50.0 89.0,32.0 76.0,37.0 23.0,61.0 76.0,37.0 23.0,61.0"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="0.0,1.0"
                    SpreadMethod="Pad" StartPoint="1.0,0.0">
                    <GradientStop Color="#EFEFEF" Offset="0.0"/>
                    <GradientStop Color="#DFE0E2" Offset="1.0"/>
                </LinearGradient>
            </Curve>
            <Script OnMouseClick="click" OnSignalChange="change"><![CDATA[function click(evt) {
	evt.preventDefault();
}

function change(evt) {
	evt.preventDefault();
	if(String(evt.getTarget().getAttribute("Name")) === "AppSelect") {
		var comp = evt.getCurrentTarget();
		var val = Math.round(+evt.getValue()).toString(2);
		comp.setAttribute("Visibility", val.slice(-2,-1) === "1" ? "Visible" : "Hidden");
	}
};]]></Script>
            <Bind Name="AppSelect" PreventDefault="True"/>
        </Component>
        <Component BottomScale="0" ComponentCounter="3"
            ContentHeight="110" ContentWidth="70" GridSize="5"
            Height="110.0" Left="760.0" Name="" Top="180.0" TopScale="1"
            Visibility="Hidden" Width="70.0">
            <Expose ExposedAttribute="TopScale" Name="Top of Scale"/>
            <Expose ExposedAttribute="BottomScale" Name="Bottom of Scale"/>
            <Curve Fill="None" Opacity="1.0"
                Points="38.0,11.0 38.0,18.0 38.0,90.0 38.0,99.0 43.0,99.0 55.0,99.0 61.0,99.0 61.0,90.0 61.0,18.0 61.0,11.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="1.0,0.5"
                    SpreadMethod="Pad" StartPoint="0.0,0.5">
                    <GradientStop Color="#FFD100" Offset="0.0">
                        <Expose ExposedAttribute="Color" Name="Electric Battery Base Colour"/>
                    </GradientStop>
                    <GradientStop Color="#01FFFFFF" Offset="1.0"/>
                </LinearGradient>
                <Bind Attribute="Opacity" Name="Rht1Cmd">
                    <ConvertRange AttributeMaxValue="1"
                        AttributeMinValue="0" SignalMaxValue="1" SignalMinValue="0">
                        <Expose ExposedAttribute="SignalMaxValue" Name="Top of Scale"/>
                        <Expose ExposedAttribute="SignalMinValue" Name="Bottom of Scale"/>
                    </ConvertRange>
                    <Expose ExposedAttribute="Name" Name="Bind Name"/>
                </Bind>
            </Curve>
            <Rectangle Fill="#FFD100" Height="88.0" Left="13.0"
                Opacity="1.0" RadiusX="5.0" RadiusY="5.0"
                Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="11.0" Width="30.0">
                <Expose ExposedAttribute="Fill" Name="Electric Battery Base Colour"/>
                <Expose ExposedAttribute="Stroke" Name="Electric Battery Base Colour"/>
            </Rectangle>
            <Rectangle Height="88.0" Left="13.0" Opacity="1.0"
                RadiusX="5.0" RadiusY="5.0" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="11.0" Width="30.0">
                <LinearGradient Attribute="Fill" EndPoint="1.0,0.0"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#EFEFEF" Offset="0.2"/>
                    <GradientStop Color="#7FFFFFFF" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Polygon Fill="None" Opacity="1.0"
                Points="32.3888537329455,15.0 17.5913408433943,49.9086629303627 27.7381700353206,52.8177221626755 15.0545044200236,95.0 39.9993080311142,44.0905444657422 27.7381700353206,40.4542204253538"
                Stroke="#707070" StrokeDashArray="0.0" StrokeWidth=".5">
                <LinearGradient Attribute="Fill" EndPoint="0,0"
                    SpreadMethod="Pad" StartPoint="0,1">
                    <GradientStop Color="#FFD100" Name="T" Offset=".5">
                        <Expose ExposedAttribute="Color" Name="Electric Battery Base Colour"/>
                    </GradientStop>
                    <GradientStop Color="#B6C5C9" Name="B" Offset=".51"/>
                </LinearGradient>
            </Polygon>
            <Bind Name="Rht1Cmd">
                <Expose ExposedAttribute="Name" Name="Bind Name"/>
                <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var comp;
var topScale;
var bottomScale;
var scaleFactor;

function onLoad(evt)
{
	comp = evt.getCurrentTarget().getParentNode();
	topScale = parseFloat(comp.getAttribute("TopScale"));
	bottomScale = parseFloat(comp.getAttribute("BottomScale"));
	scaleFactor = topScale-bottomScale;
	
	
	//alert();
}

function onChange(evt) {
	val = +evt.getValue();
	setDisplay(val)
}

function setDisplay(val) {
	if (bottomScale == 0){
		val = (val)/scaleFactor;
	}
	else{
		val = (val-scaleFactor)/scaleFactor;
	}
	t=Math.max(val-.01,0);
	b=val;
	if(b == 1) t = .99;
	if (t == 0) b= .01;
	comp.getChildByName("B").setAttribute("Offset", b);
	comp.getChildByName("T").setAttribute("Offset", t);
};]]></Script>
            </Bind>
            <Script OnMouseClick="click" OnSignalChange="change"><![CDATA[function click(evt) {
	evt.preventDefault();
}

function change(evt) {
	evt.preventDefault();
	if(String(evt.getTarget().getAttribute("Name")) === "AppSelect") {
		var comp = evt.getCurrentTarget();
		var val = Math.round(+evt.getValue()).toString(2);
		var bit3 = val.slice(-4,-3) === "1" ? true : false;
		var bit4 = val.slice(-5,-4) === "1" ? true : false;
		var bit5 = val.slice(-6,-5) === "1" ? true : false;
		comp.setAttribute("Visibility", bit3 || bit4 || bit5 ? "Visible" : "Hidden");
	}
};]]></Script>
            <Bind Name="AppSelect" PreventDefault="True"/>
        </Component>
        <Component BottomScale="0" ComponentCounter="3"
            ContentHeight="110" ContentWidth="70" GridSize="5"
            Height="110.0" Left="820.0" Name="" Top="180.0" TopScale="1"
            Visibility="Hidden" Width="70.0">
            <Expose ExposedAttribute="TopScale" Name="Top of Scale"/>
            <Expose ExposedAttribute="BottomScale" Name="Bottom of Scale"/>
            <Curve Fill="None" Opacity="1.0"
                Points="38.0,11.0 38.0,18.0 38.0,90.0 38.0,99.0 43.0,99.0 55.0,99.0 61.0,99.0 61.0,90.0 61.0,18.0 61.0,11.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="1.0,0.5"
                    SpreadMethod="Pad" StartPoint="0.0,0.5">
                    <GradientStop Color="#FFD100" Offset="0.0">
                        <Expose ExposedAttribute="Color" Name="Electric Battery Base Colour"/>
                    </GradientStop>
                    <GradientStop Color="#01FFFFFF" Offset="1.0"/>
                </LinearGradient>
                <Bind Attribute="Opacity" Name="Rht2Cmd">
                    <ConvertRange AttributeMaxValue="1"
                        AttributeMinValue="0" SignalMaxValue="1" SignalMinValue="0">
                        <Expose ExposedAttribute="SignalMaxValue" Name="Top of Scale"/>
                        <Expose ExposedAttribute="SignalMinValue" Name="Bottom of Scale"/>
                    </ConvertRange>
                    <Expose ExposedAttribute="Name" Name="Bind Name"/>
                </Bind>
            </Curve>
            <Rectangle Fill="#FFD100" Height="88.0" Left="13.0"
                Opacity="1.0" RadiusX="5.0" RadiusY="5.0"
                Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="11.0" Width="30.0">
                <Expose ExposedAttribute="Fill" Name="Electric Battery Base Colour"/>
                <Expose ExposedAttribute="Stroke" Name="Electric Battery Base Colour"/>
            </Rectangle>
            <Rectangle Height="88.0" Left="13.0" Opacity="1.0"
                RadiusX="5.0" RadiusY="5.0" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="11.0" Width="30.0">
                <LinearGradient Attribute="Fill" EndPoint="1.0,0.0"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#EFEFEF" Offset="0.2"/>
                    <GradientStop Color="#7FFFFFFF" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Polygon Fill="None" Opacity="1.0"
                Points="32.3888537329455,15.0 17.5913408433943,49.9086629303627 27.7381700353206,52.8177221626755 15.0545044200236,95.0 39.9993080311142,44.0905444657422 27.7381700353206,40.4542204253538"
                Stroke="#707070" StrokeDashArray="0.0" StrokeWidth=".5">
                <LinearGradient Attribute="Fill" EndPoint="0,0"
                    SpreadMethod="Pad" StartPoint="0,1">
                    <GradientStop Color="#FFD100" Name="T" Offset=".5">
                        <Expose ExposedAttribute="Color" Name="Electric Battery Base Colour"/>
                    </GradientStop>
                    <GradientStop Color="#B6C5C9" Name="B" Offset=".51"/>
                </LinearGradient>
            </Polygon>
            <Bind Name="Rht2Cmd">
                <Expose ExposedAttribute="Name" Name="Bind Name"/>
                <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var comp;
var topScale;
var bottomScale;
var scaleFactor;

function onLoad(evt)
{
	comp = evt.getCurrentTarget().getParentNode();
	topScale = parseFloat(comp.getAttribute("TopScale"));
	bottomScale = parseFloat(comp.getAttribute("BottomScale"));
	scaleFactor = topScale-bottomScale;
	
	
	//alert();
}

function onChange(evt) {
	val = +evt.getValue();
	setDisplay(val)
}

function setDisplay(val) {
	if (bottomScale == 0){
		val = (val)/scaleFactor;
	}
	else{
		val = (val-scaleFactor)/scaleFactor;
	}
	t=Math.max(val-.01,0);
	b=val;
	if(b == 1) t = .99;
	if (t == 0) b= .01;
	comp.getChildByName("B").setAttribute("Offset", b);
	comp.getChildByName("T").setAttribute("Offset", t);
};]]></Script>
            </Bind>
            <Script OnMouseClick="click" OnSignalChange="change"><![CDATA[function click(evt) {
	evt.preventDefault();
}

function change(evt) {
	evt.preventDefault();
	if(String(evt.getTarget().getAttribute("Name")) === "AppSelect") {
		var comp = evt.getCurrentTarget();
		var val = Math.round(+evt.getValue()).toString(2);
		var bit3 = val.slice(-4,-3) === "1" ? true : false;
		var bit4 = val.slice(-5,-4) === "1" ? true : false;
		var bit5 = val.slice(-6,-5) === "1" ? true : false;
		comp.setAttribute("Visibility", bit4 || bit5 ? "Visible" : "Hidden");
	}
};]]></Script>
            <Bind Name="AppSelect" PreventDefault="True"/>
        </Component>
        <Component ComponentCounter="4" ContentHeight="110"
            ContentWidth="130" ForcedColour="#FFD100" GridSize="10"
            Height="110.0" Left="630.0" Name="" Top="180.0"
            Visibility="Hidden" Width="130.0">
            <Metadata Name="Version" Value="1.0"/>
            <Polygon Fill="#C6C9CD" Opacity="1.0"
                Points="80.0,81.0 41.0,81.0 43.800284147262,76.7999997139 45.900320768357,72.750011920931 47.350332975387,67.949993610383 47.20024752617,62.200024127962 46.0,58.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                <Bind Attribute="Fill" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                    <ConvertValue AttributeValue="#C6C9CD" SignalLessOrEqualTo="0"/>
                </Bind>
            </Polygon>
            <Rectangle Fill="#C6C9CD" Height="37.0" Left="78.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0" Stroke="None"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="12.0" Width="38.0">
                <Bind Attribute="Fill" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                    <ConvertValue AttributeValue="#C6C9CD" SignalLessOrEqualTo="0"/>
                </Bind>
            </Rectangle>
            <Ellipse Height="69.0" Left="44.0" Opacity="1.0"
                Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="12.0" Width="69.0">
                <RadialGradient Attribute="Fill" Focus=".5,.5"
                    RadiusX="0.5" RadiusY="0.5" SpreadMethod="Pad">
                    <GradientStop Color="#FEFEFE" Offset=".6"/>
                    <GradientStop Color="#C6C9CD" Offset="1.0">
                        <Bind Attribute="Color" Name="FanCmd">
                            <Expose ExposedAttribute="Name" Name="Command Bind"/>
                            <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                            <ConvertValue AttributeValue="#C6C9CD" SignalLessOrEqualTo="0"/>
                        </Bind>
                    </GradientStop>
                </RadialGradient>
            </Ellipse>
            <Ellipse Fill="#EEEEEE" Height="44.0" Left="58.0" Name=""
                Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1" Top="25.0" Width="44.0">
                <Bind Color="#F0080E" Fill="#FFD100" Name="FanCmd" Stroke="#42B4E6">
                    <Expose ExposedAttribute="Color" Name="Error Color"/>
                    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
                    <Expose ExposedAttribute="Stroke" Name="Database Color"/>
                    <Expose ExposedAttribute="Name" Name="Feedback Bind"/>
                    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var body;
var HighLightCol="#404040";
var originalBodyColor;

function onLoad(evt)
{
  comp = evt.getCurrentTarget();
  body = comp.getParentNode();
  originalBodyColor=body.getAttribute("Stroke");
}

function onChange(evt)
{
  status = parseInt(evt.getStatus());
  
  bgStroke = setColour(status);
  if (bgStroke=="device"){
  	body.setAttribute("Stroke", originalBodyColor);
 	body.setAttribute("StrokeWidth", "1");
  }
  else{
	  body.setAttribute("Stroke", bgStroke);
	  body.setAttribute("StrokeWidth", "2");
  }
}

function setColour(status){
var col;

  if(status==2){//Value from Device
  	return "device";
  }
  else{
  		if(status==3){//Forced Value
  			return comp.getAttribute("Fill");
  		}
  		else{
  	 		if(status==1){//Database Value
  	 		return comp.getAttribute("Stroke");
  			}
  			else{
  				if(status==0){
  					return comp.getAttribute("Color")
  				}
  			}
  		}
  }

};]]></Script>
                </Bind>
            </Ellipse>
            <Component Clip="False" ContentHeight="41.63"
                ContentWidth="41.63" Height="41.63"
                Left="59.370223159791" Top="26.369987602234" Width="41.63">
                <Path
                    PathData="M20.6300048828125,20.6300048828125 L41.6300038828125,20.6300048828125 M20.6300048828125,20.6300048828125 L34.6300038828125,25.6300048828125 C40.506503882812467,26.72900488281249 41.6300038828125,22.6300048828125 41.6300038828125,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                </Path>
                <Path
                    PathData="M20.6300048828125,20.6300048828125 L41.6300048828125,20.6300048828125 M20.6300048828125,20.6300048828125 L34.6300048828125,25.6300048828125 C40.506504882812465,26.72900488281249 41.6300048828125,22.6300048828125 41.6300048828125,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="45" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.6300048828125,20.6300048828125 L41.6300048828125,20.6300048828125 M20.6300048828125,20.6300048828125 L34.6300048828125,25.6300048828125 C40.506504882812465,26.72900488281249 41.6300048828125,22.6300048828125 41.6300048828125,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="90" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.729004882812546,20.6300048828125 L41.729004882812546,20.6300048828125 M20.729004882812546,20.6300048828125 L34.729004882812546,25.6300048828125 C40.605504882812511,26.72900488281249 41.729004882812546,22.6300048828125 41.729004882812546,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="135" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.998005882812549,20.6300048828125 L41.998005882812549,20.6300048828125 M20.998005882812549,20.6300048828125 L34.998005882812549,25.6300048828125 C40.874505882812514,26.72900488281249 41.998005882812549,22.6300048828125 41.998005882812549,20.6300048828125"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="180" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.630006882812495,20.72900488281249 L41.630006882812495,20.72900488281249 M20.630006882812495,20.72900488281249 L34.630006882812495,25.72900488281249 C40.506506882812459,26.828004882812479 41.630006882812495,22.72900488281249 41.630006882812495,20.72900488281249"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="225" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.479007882812539,20.998005882812492 L41.479007882812539,20.998005882812492 M20.479007882812539,20.998005882812492 L34.479007882812539,25.998005882812492 C40.3555078828125,27.097005882812482 41.479007882812539,22.998005882812492 41.479007882812539,20.998005882812492"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="270" Center="0.0,0.0"/>
                </Path>
                <Path
                    PathData="M20.630009882812487,21.630006882812495 L41.630009882812487,21.630006882812495 M20.630009882812487,21.630006882812495 L34.630009882812487,26.630006882812495 C40.506509882812452,27.729006882812484 41.630009882812487,23.630006882812495 41.630009882812487,21.630006882812495"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="0.0,1"
                        SpreadMethod="Reflect" StartPoint="0,0">
                        <GradientStop Color="#9FA0A4" Offset="0.0"/>
                        <GradientStop Color="#EEEEEE" Offset="0.2"/>
                        <GradientStop Color="#101010" Offset="1.0"/>
                    </LinearGradient>
                    <Rotate Angle="315" Center="0.0,0.0"/>
                </Path>
                <Rotate>
                    <Animate Animation="Stop" Attribute="Angle"
                        CalcMode="Linear" Duration="2" From="0" To="360">
                        <Bind Attribute="Animation" Name="FanCmd">
                            <Expose ExposedAttribute="Name" Name="Feedback Bind"/>
                            <ConvertValue AttributeValue="Start" SignalMoreOrEqualTo="1"/>
                            <ConvertValue AttributeValue="Stop" SignalLessOrEqualTo="0"/>
                        </Bind>
                    </Animate>
                </Rotate>
            </Component>
            <Line Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="80.0" X2="98.0" Y1="47.0" Y2="59.0"/>
            <Line Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="80.0" X2="80.0" Y1="47.0" Y2="26.0"/>
            <Ellipse Fill="None" Height="44.0" Left="58.0" Name=""
                Opacity="1.0" Stroke="#F0080E" StrokeDashArray="0.0"
                StrokeWidth="2" Top="25.0" Visibility="Hidden" Width="44.0"/>
            <Ellipse Fill="#EEEEEE" Height="20.0" Left="70.0"
                Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" Top="37.0" Width="20.0"/>
            <Ellipse Fill="#DFE0E2" Height="22.0" Left="15.0"
                Opacity="1.0" Stroke="None" StrokeDashArray="0.0"
                StrokeWidth="1.0" Top="56.0" Width="22.0">
                <Bind Attribute="Fill" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <ConvertValue AttributeValue="#4FA600" SignalMoreOrEqualTo="1"/>
                    <ConvertValue AttributeValue="#DFE0E2" SignalLessOrEqualTo="0"/>
                </Bind>
            </Ellipse>
            <Path Fill="None"
                PathData="M113.0,49.0 L115.0,49.0 M79.0,12.0 L115.0,12.0 M45.0,55.0 C42.514,46.97 43.541,35.91 50.0,27.0 56.933000000000007,17.435 68.978,12.145 78.0,12.0 M113.0,49.0 C113.0,66.673 96.435,81.0 76.0,81.0 M45.0,55.0 C46.198,57.8640001 48.592,63.592 48.0,68.0 47.345,72.878 43.115,78.293 41.0,81.0 M37.0,67.0 C37.0,73.075 32.075,78.0 26.0,78.0 19.925,78.0 15.0,73.075 15.0,67.0 15.0,60.925 19.925,56.0 26.0,56.0 32.075,56.0 37.0,60.925 37.0,67.0 z"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1">
                <Bind Color="#F0080E" Fill="#FFD100" Name="FanCmd" Stroke="#42B4E6">
                    <Expose ExposedAttribute="Color" Name="Error Color"/>
                    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
                    <Expose ExposedAttribute="Stroke" Name="Database Color"/>
                    <Expose ExposedAttribute="Name" Name="Command Bind"/>
                    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var body;
var HighLightCol="#404040";
var originalBodyColor;

function onLoad(evt)
{
  comp = evt.getCurrentTarget();
  body = comp.getParentNode();
  originalBodyColor=body.getAttribute("Stroke");
}

function onChange(evt)
{
  status = parseInt(evt.getStatus());
  
  bgStroke = setColour(status);
  if (bgStroke=="device"){
  	body.setAttribute("Stroke", originalBodyColor);
 	body.setAttribute("StrokeWidth", "1");
  }
  else{
	  body.setAttribute("Stroke", bgStroke);
	  body.setAttribute("StrokeWidth", "2");
  }
}

function setColour(status){
var col;

  if(status==2){//Value from Device
  	return "device";
  }
  else{
  		if(status==3){//Forced Value
  			return comp.getAttribute("Fill");
  		}
  		else{
  	 		if(status==1){//Database Value
  	 		return comp.getAttribute("Stroke");
  			}
  			else{
  				if(status==0){
  					return comp.getAttribute("Color")
  				}
  			}
  		}
  }

};]]></Script>
                </Bind>
            </Path>
            <Path Fill="None"
                PathData="M113.0,49.0 L115.0,49.0 M79.0,12.0 L115.0,12.0 M45.0,55.0 C42.514,46.97 43.541,35.91 50.0,27.0 C56.933,17.435 68.978,12.145 78.0,12.0 M113.0,49.0 C113.0,66.673 96.435,81.0 76.0,81.0 M45.0,55.0 C46.198,57.864 48.592,63.592 48.0,68.0 C47.345,72.878 43.115,78.293 41.0,81.0 M37.0,67.0 C37.0,73.075 32.075,78.0 26.0,78.0 C19.925,78.0 15.0,73.075 15.0,67.0 C15.0,60.925 19.925,56.0 26.0,56.0 C32.075,56.0 37.0,60.925 37.0,67.0 z"
                Stroke="#F0080E" StrokeDashArray="0.0" StrokeWidth="2" Visibility="Hidden"/>
            <Rectangle Fill="#404040" Height="39.0" Left="116.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="11.0" Width="2.0"/>
            <Rectangle Height="21.0" Left="10.0" Opacity="1.0"
                RadiusX="2" RadiusY="2" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1" Top="78.0"
                Visibility="Visible" Width="107.0">
                <LinearGradient Attribute="Fill" EndPoint="0.0,1.0"
                    SpreadMethod="Pad" StartPoint="0.0,0.0">
                    <GradientStop Color="#EFEFEF" Offset="0.0"/>
                    <GradientStop Color="#DFE0E2" Offset="1.0"/>
                </LinearGradient>
            </Rectangle>
            <Curve Opacity="1.0"
                Points="76.0,38.0 88.0,33.0 96.0,51.0 84.0,56.0"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Rectangle Fill="#9FA0A4" Height="88.0" Left="119.0"
                Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                Stroke="#9FA0A4" StrokeDashArray="0.0" StrokeWidth="1.0"
                Top="11.0" Width="3.0"/>
            <Line Opacity="1.0" Stroke="#404040" StrokeDashArray="0.0"
                StrokeWidth="1.0" X1="80.0" X2="61.0" Y1="47.0" Y2="58.0"/>
            <Curve Opacity="1.0"
                Points="23.0,61.0 18.0,62.0 16.0559310913086,75.02082824707 28.0,74.0 85.0,56.0 28.0,74.0 85.0,56.0 95.0,50.0 89.0,32.0 76.0,37.0 23.0,61.0 76.0,37.0 23.0,61.0"
                Stroke="#404040" StrokeDashArray="0.0" StrokeWidth="1.0">
                <LinearGradient Attribute="Fill" EndPoint="0.0,1.0"
                    SpreadMethod="Pad" StartPoint="1.0,0.0">
                    <GradientStop Color="#EFEFEF" Offset="0.0"/>
                    <GradientStop Color="#DFE0E2" Offset="1.0"/>
                </LinearGradient>
            </Curve>
            <Script OnMouseClick="click" OnSignalChange="change"><![CDATA[function click(evt) {
	evt.preventDefault();
}

function change(evt) {
	evt.preventDefault();
	if(String(evt.getTarget().getAttribute("Name")) === "AppSelect") {
		var comp = evt.getCurrentTarget();
		var val = Math.round(+evt.getValue()).toString(2);
		comp.setAttribute("Visibility", val.slice(-3,-2) === "1" ? "Visible" : "Hidden");
	}
};]]></Script>
            <Bind Name="AppSelect" PreventDefault="True"/>
        </Component>
        <Component ComponentCounter="3" ContentHeight="180"
            ContentWidth="80" GridSize="10" Height="180.0" Left="790.0"
            Name="" Top="180.0" Visibility="Hidden" Width="80.0">
            <Metadata Name="Version" Value="1.0"/>
            <Rectangle Fill="#009530" Height="3.0" Left="45.5"
                Opacity="1.0" RadiusX="1" RadiusY="1" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="129.0" Width="7.0"/>
            <Rectangle Fill="#009530" Height="20.0" Left="51.5"
                RadiusX="2" RadiusY="2" Stroke="#404040"
                StrokeDashArray="0.0" StrokeWidth="1.0" Top="120.5" Width="15.0"/>
            <Text FontFamily="Arial" FontSize="10.0" FontStyle="Normal"
                FontWeight="Normal" HorizontalAlign="Center" Left="59.0"
                Opacity="1.0" Stroke="#FFFFFF" TextDecoration="None"
                Top="124.91404312849" VerticalAlign="Top"><![CDATA[V]]></Text>
            <Polyline Opacity="1.0"
                Points="37.0,156.0 35.0,156.0 35.0,166.0 33.0,166.0 37.0,173.0 41.0,166.0 39.0,166.0 39.0,156.0"
                Stroke="#9FA0A4" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Polyline Opacity="1.0"
                Points="19.0,173.0 17.0,173.0 17.0,163.0 15.0,163.0 19.0,156.0 23.0,163.0 21.0,163.0 21.0,173.0"
                Stroke="#9FA0A4" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Path Fill="#E47F00"
                PathData="M17.5,99.0 L20.5,99.0 20.5,154.0 17.5,154.0 z M35.5,99.0 L38.5,99.0 38.5,123.0 35.5,123.0 z M35.5,139.0 L38.5,139.0 38.5,154.0 35.5,154.0 z"
                Stroke="#E47F00" StrokeDashArray="0.0" StrokeWidth="1.0">
                <Expose ExposedAttribute="Fill" Name="HhwFlColour"/>
                <Expose ExposedAttribute="Stroke" Name="HhwFlColour"/>
            </Path>
            <Path Fill="#E47F00"
                PathData="M41.5,127.0 C41.5,126.44801 41.948,126.0 42.5,126.0 L45.5,126.0 C46.052002,126.0 46.5,126.44801 46.5,127.0 46.5,127.0 46.5,127.0 46.5,127.0 L46.5,134.0 C46.5,134.55201 46.052002,135.0 45.5,135.0 L42.5,135.0 C41.948,135.0 41.5,134.55201 41.5,134.0 z M32.5,125.0 C32.5,123.895009 33.395,123.0 34.5,123.0 L39.5,123.0 C40.605001,123.0 41.5,123.895009 41.5,125.0 41.5,125.0 41.5,125.0 41.5,125.0 L41.5,136.0 C41.5,137.10501 40.605001,138.0 39.5,138.0 L34.5,138.0 C33.395,138.0 32.5,137.10501 32.5,136.0 z"
                Stroke="#E47F00" StrokeDashArray="0.0" StrokeWidth="1.0">
                <Expose ExposedAttribute="Fill" Name="HhwFlColour"/>
                <Expose ExposedAttribute="Stroke" Name="HhwFlColour"/>
            </Path>
            <Path Fill="None"
                PathData="M17.5,154.0 L17.5,100.0 M20.5,100.0 L20.5,154.0 M35.5,100.0 L35.5,122.0 M38.5,100.0 L38.5,122.0 M35.5,139.0 L35.5,154.0 M38.5,154.0 L38.5,139.0 M32.5,125.0 C32.5,123.895009 33.395,123.0 34.5,123.0 L39.5,123.0 C40.605001,123.0 41.5,123.895009 41.5,125.0 41.5,125.0 41.5,125.0 41.5,125.0 L41.5,136.0 C41.5,137.10501 40.605001,138.0 39.5,138.0 L34.5,138.0 C33.395,138.0 32.5,137.10501 32.5,136.0 z M41.5,127.0 C41.5,126.44801 41.948,126.0 42.5,126.0 L45.5,126.0 C46.052002,126.0 46.5,126.44801 46.5,127.0 46.5,127.0 46.5,127.0 46.5,127.0 L46.5,134.0 C46.5,134.55201 46.052002,135.0 45.5,135.0 L42.5,135.0 C41.948,135.0 41.5,134.55201 41.5,134.0 z"
                Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth="1.0"/>
            <Component BottomScale="0" ComponentCounter="3"
                ContentHeight="110" ContentWidth="70" GridSize="10"
                Height="110.0" Id="Coil" Left="0.0" Name="" Top="0.0"
                TopScale="100" Width="70.0">
                <Expose ExposedAttribute="TopScale" Name="Top of Scale"/>
                <Expose ExposedAttribute="BottomScale" Name="Bottom of Scale"/>
                <Curve Fill="None" Opacity="1.0"
                    Points="38.0,11.0 38.0,18.0 38.0,90.0 38.0,99.0 43.0,99.0 55.0,99.0 61.0,99.0 61.0,90.0 61.0,18.0 61.0,11.0"
                    Stroke="None" StrokeDashArray="0.0" StrokeWidth="1.0">
                    <LinearGradient Attribute="Fill" EndPoint="1.0,0.5"
                        SpreadMethod="Pad" StartPoint="0.0,0.5">
                        <GradientStop Color="#E47F00" Offset="0.0">
                            <Expose ExposedAttribute="Color" Name="Coil Base Colour"/>
                            <Bind Attribute="Color" Name="RhtPos">
                                <ConvertRange
                                    AttributeMaxValue="#E47F00"
                                    AttributeMinValue="#01FFFFFF"
                                    SignalMaxValue="100" SignalMinValue="0">
                                    <Expose
                                    ExposedAttribute="SignalMaxValue" Name="Top of Scale"/>
                                    <Expose
                                    ExposedAttribute="SignalMinValue" Name="Bottom of Scale"/>
                                    <Expose
                                    ExposedAttribute="AttributeMaxValue" Name="Coil Base Colour"/>
                                </ConvertRange>
                                <Expose ExposedAttribute="Name" Name="Bind Name"/>
                            </Bind>
                        </GradientStop>
                        <GradientStop Color="#01FFFFFF" Offset="1.0"/>
                    </LinearGradient>
                </Curve>
                <Rectangle Fill="#E47F00" Height="88.0" Left="13.0"
                    Opacity="1.0" RadiusX="5.0" RadiusY="5.0"
                    Stroke="#E47F00" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="11.0" Width="30.0">
                    <Expose ExposedAttribute="Fill" Name="Coil Base Colour"/>
                    <Expose ExposedAttribute="Stroke" Name="Coil Base Colour"/>
                </Rectangle>
                <Rectangle Height="88.0" Left="13.0" Name="Body"
                    Opacity="1.0" RadiusX="5.0" RadiusY="5.0"
                    Stroke="#404040" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="11.0" Width="30.0">
                    <LinearGradient Attribute="Fill" EndPoint="1.0,0.0"
                        SpreadMethod="Pad" StartPoint="0.0,0.0">
                        <GradientStop Color="#EFEFEF" Offset="0.2"/>
                        <GradientStop Color="#7FFFFFFF" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Path Fill="None"
                    PathData="M24.844006992651366,19.734512214697265 C25.135004392651368,20.831508714697264 23.370005392651365,21.825512014697267 20.902006992651366,21.954513314697266 18.434005292651371,22.084513014697265 16.19700539265137,21.299508614697267 15.906008392651366,20.202512214697265 15.865004992651365,20.047508714697265 15.865004992651365,19.889513214697267 15.906008392651366,19.734512214697265 M24.844006992651366,26.552508714697268 C25.135004392651368,27.649515314697268 23.370005392651365,28.643508714697269 20.902006992651366,28.772512314697266 18.434005292651371,28.902512014697265 16.19700539265137,28.117515014697268 15.906008392651366,27.020512214697263 15.865004992651365,26.865513314697267 15.865004992651365,26.708508814697268 15.906008392651366,26.552508714697268 M24.844006992651366,33.370513014697266 C25.135004392651368,34.467512014697263 23.370005392651365,35.461513314697264 20.902006992651366,35.591513214697265 18.434005292651371,35.720508814697268 16.19700539265137,34.936508714697268 15.906008392651366,33.839518714697263 15.865004992651365,33.683518714697264 15.865004992651365,33.526515014697267 15.906008392651366,33.370513014697266 M24.844006992651366,40.188523014697267 C25.135004392651368,41.285513314697269 23.370005392651365,42.279523014697268 20.902006992651366,42.409523314697267 18.434005292651371,42.538513314697269 16.19700539265137,41.754522314697269 15.906008392651366,40.657512014697268 15.865004992651365,40.501513014697267 15.865004992651365,40.344523314697263 15.906008392651366,40.188523014697267 M24.844006992651366,47.006515014697264 C25.135004392651368,48.103513014697263 23.370005392651365,49.098515014697263 20.902006992651366,49.227515314697264 18.434005292651371,49.356523314697263 16.19700539265137,48.572513014697265 15.906008392651366,47.475522014697269 15.865004992651365,47.319522014697263 15.865004992651365,47.162513014697268 15.906008392651366,47.006515014697264 M24.844006992651366,53.825523014697268 C25.135004392651368,54.922513314697269 23.370005392651365,55.91652311469727 20.902006992651366,56.045515314697269 18.434005292651371,56.174515114697272 16.19700539265137,55.390512014697265 15.906008392651366,54.293513014697268 15.865004992651365,54.138513014697267 15.865004992651365,53.980522214697267 15.906008392651366,53.825523014697268 M24.844006992651366,60.643513114697271 C25.135004392651368,61.740514014697268 23.370005392651365,62.73451231469727 20.902006992651366,62.863524014697262 18.434005292651371,62.993523314697271 16.19700539265137,62.208515014697269 15.906008392651366,61.111524014697267 15.865004992651365,60.956523014697268 15.865004992651365,60.798513114697272 15.906008392651366,60.643513114697271 M24.844006992651366,67.461513314697271 C25.135004392651368,68.558523314697268 23.370005392651365,69.552523314697268 20.902006992651366,69.682524014697265 18.434005292651371,69.811515014697264 16.19700539265137,69.026515314697264 15.906008392651366,67.930515014697264 15.865004992651365,67.774523314697262 15.865004992651365,67.617525014697264 15.906008392651366,67.461513314697271 M24.844006992651366,74.279523314697272 C25.135004392651368,75.376515314697272 23.370005392651365,76.370513314697263 20.902006992651366,76.500523314697261 18.434005292651371,76.629525014697265 16.19700539265137,75.84551501469727 15.906008392651366,74.748525014697265 15.865004992651365,74.592514014697272 15.865004992651365,74.435513314697261 15.906008392651366,74.279523314697272 M24.844006992651366,81.097515314697262 C25.135004392651368,82.194515014697259 23.370005392651365,83.188515014697259 20.902006992651366,83.318515014697269 18.434005292651371,83.447513314697261 16.19700539265137,82.663515014697268 15.906008392651366,81.566513314697261 15.865004992651365,81.410515014697268 15.865004992651365,81.253515014697271 15.906008392651366,81.097515314697262 M24.844006992651366,87.916515014697268 C25.135004392651368,89.013513314697263 23.370005392651365,90.007514814697259 20.902006992651366,90.136516814697259 18.434005292651371,90.265516814697264 16.19700539265137,89.481515014697266 15.906008392651366,88.384515014697271 15.865004992651365,88.228515014697265 15.865004992651365,88.071515014697269 15.906008392651366,87.916515014697268 M39.84400799265137,19.734512214697265 C40.135004992651361,20.831508714697264 38.370004992651367,21.825512014697267 35.90200739265137,21.954513314697266 33.434005392651365,22.084513014697265 31.19700539265137,21.299508614697267 30.906008492651367,20.202512214697265 30.865005392651369,20.047508714697265 30.865005392651369,19.889513214697267 30.906008492651367,19.734512214697265 M39.84400799265137,26.552508714697268 C40.135004992651361,27.649515314697268 38.370004992651367,28.643508714697269 35.90200739265137,28.772512314697266 33.434005392651365,28.902512014697265 31.19700539265137,28.117515014697268 30.906008492651367,27.020512214697263 30.865005392651369,26.865513314697267 30.865005392651369,26.708508814697268 30.906008492651367,26.552508714697268 M39.84400799265137,33.370513014697266 C40.135004992651361,34.467512014697263 38.370004992651367,35.461513314697264 35.90200739265137,35.591513214697265 33.434005392651365,35.720508814697268 31.19700539265137,34.936508714697268 30.906008492651367,33.839518714697263 30.865005392651369,33.683518714697264 30.865005392651369,33.526515014697267 30.906008492651367,33.370513014697266 M39.84400799265137,40.188523014697267 C40.135004992651361,41.285513314697269 38.370004992651367,42.279523014697268 35.90200739265137,42.409523314697267 33.434005392651365,42.538513314697269 31.19700539265137,41.754522314697269 30.906008492651367,40.657512014697268 30.865005392651369,40.501513014697267 30.865005392651369,40.344523314697263 30.906008492651367,40.188523014697267 M39.84400799265137,47.006515014697264 C40.135004992651361,48.103513014697263 38.370004992651367,49.098515014697263 35.90200739265137,49.227515314697264 33.434005392651365,49.356523314697263 31.19700539265137,48.572513014697265 30.906008492651367,47.475522014697269 30.865005392651369,47.319522014697263 30.865005392651369,47.162513014697268 30.906008492651367,47.006515014697264 M39.84400799265137,53.825523014697268 C40.135004992651361,54.922513314697269 38.370004992651367,55.91652311469727 35.90200739265137,56.045515314697269 33.434005392651365,56.174515114697272 31.19700539265137,55.390512014697265 30.906008492651367,54.293513014697268 30.865005392651369,54.138513014697267 30.865005392651369,53.980522214697267 30.906008492651367,53.825523014697268 M39.84400799265137,60.643513114697271 C40.135004992651361,61.740514014697268 38.370004992651367,62.73451231469727 35.90200739265137,62.863524014697262 33.434005392651365,62.993523314697271 31.19700539265137,62.208515014697269 30.906008492651367,61.111524014697267 30.865005392651369,60.956523014697268 30.865005392651369,60.798513114697272 30.906008492651367,60.643513114697271 M39.84400799265137,67.461513314697271 C40.135004992651361,68.558523314697268 38.370004992651367,69.552523314697268 35.90200739265137,69.682524014697265 33.434005392651365,69.811515014697264 31.19700539265137,69.026515314697264 30.906008492651367,67.930515014697264 30.865005392651369,67.774523314697262 30.865005392651369,67.617525014697264 30.906008492651367,67.461513314697271 M39.84400799265137,74.279523314697272 C40.135004992651361,75.376515314697272 38.370004992651367,76.370513314697263 35.90200739265137,76.500523314697261 33.434005392651365,76.629525014697265 31.19700539265137,75.84551501469727 30.906008492651367,74.748525014697265 30.865005392651369,74.592514014697272 30.865005392651369,74.435513314697261 30.906008492651367,74.279523314697272 M39.84400799265137,81.097515314697262 C40.135004992651361,82.194515014697259 38.370004992651367,83.188515014697259 35.90200739265137,83.318515014697269 33.434005392651365,83.447513314697261 31.19700539265137,82.663515014697268 30.906008492651367,81.566513314697261 30.865005392651369,81.410515014697268 30.865005392651369,81.253515014697271 30.906008492651367,81.097515314697262 M39.84400799265137,87.916515014697268 C40.135004992651361,89.013513314697263 38.370004992651367,90.007514814697259 35.90200739265137,90.136516814697259 33.434005392651365,90.265516814697264 31.19700539265137,89.481515014697266 30.906008492651367,88.384515014697271 30.865005392651369,88.228515014697265 30.865005392651369,88.071515014697269 30.906008492651367,87.916515014697268"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="2" Visibility="Visible">
                    <LinearGradient Attribute="Stroke" EndPoint="0,0"
                        SpreadMethod="Pad" StartPoint="0,1">
                        <GradientStop Color="#E47F00" Name="T" Offset=".5">
                            <Expose ExposedAttribute="Color" Name="Coil Base Colour"/>
                        </GradientStop>
                        <GradientStop Color="#626469" Name="B" Offset=".51"/>
                    </LinearGradient>
                </Path>
                <Bind Name="RhtPos">
                    <Expose ExposedAttribute="Name" Name="Bind Name"/>
                    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var comp;
var topScale;
var bottomScale;
var scaleFactor;

function onLoad(evt)
{
	comp = evt.getCurrentTarget().getParentNode();
	topScale = parseFloat(comp.getAttribute("TopScale"));
	bottomScale = parseFloat(comp.getAttribute("BottomScale"));
	scaleFactor = topScale-bottomScale;
}

function onChange(evt)
{
	val = parseFloat(evt.getValue());
	setDisplay(val)
}

function setDisplay(val){
	if (bottomScale == 0){
		val = (val)/scaleFactor;
	}
	else{
		val = (val-scaleFactor)/scaleFactor;
	}
	t=val-.01;
	b=val;
	if(b == 1) t = .99;
	if (b <= .01) t= 0;
	comp.getChildByName("B").setAttribute("Offset", +b);
	comp.getChildByName("T").setAttribute("Offset", +t);
};]]></Script>
                </Bind>
                <Bind Color="#F0080E" Fill="#FFD100" Name="RhtPos" Stroke="#42B4E6">
                    <Expose ExposedAttribute="Color" Name="Error Color"/>
                    <Expose ExposedAttribute="Fill" Name="Forced Color"/>
                    <Expose ExposedAttribute="Stroke" Name="Database Color"/>
                    <Expose ExposedAttribute="Name" Name="Bind Name"/>
                    <Script OnDocumentLoad="onLoad" OnSignalChange="onChange"><![CDATA[var body;
var HighLightCol="#404040";
var originalBodyColor;

function onLoad(evt)
{
  comp = evt.getCurrentTarget();
  body = comp.getParentNode().getChildByName("Body");
  originalBodyColor=body.getAttribute("Stroke");
}

function onChange(evt)
{
  status = parseInt(evt.getStatus());
  
  bgStroke = setColour(status);
  if (bgStroke=="device"){
  	body.setAttribute("Stroke", originalBodyColor);
 	body.setAttribute("StrokeWidth", "1");
  }
  else{
	  body.setAttribute("Stroke", bgStroke);
	  body.setAttribute("StrokeWidth", "2");
  }
}

function setColour(status){
var col;

  if(status==2){//Value from Device
  	return "device";
  }
  else{
  		if(status==3){//Forced Value
  			return comp.getAttribute("Fill");
  		}
  		else{
  	 		if(status==1){//Database Value
  	 		return comp.getAttribute("Stroke");
  			}
  			else{
  				if(status==0){
  					return comp.getAttribute("Color")
  				}
  			}
  		}
  }

};]]></Script>
                </Bind>
            </Component>
            <Script OnMouseClick="click" OnSignalChange="change"><![CDATA[function click(evt) {
	evt.preventDefault();
}

function change(evt) {
	evt.preventDefault();
	if(String(evt.getTarget().getAttribute("Name")) === "AppSelect") {
		var comp = evt.getCurrentTarget();
		var val = Math.round(+evt.getValue()).toString(2);
		var bit6 = val.slice(-7,-6) === "1" ? true : false;
		var bit7 = val.slice(-8,-7) === "1" ? true : false;
		var bit8 = val.slice(-9,-8) === "1" ? true : false;
		comp.setAttribute("Visibility", bit6 || bit7 || bit8 ? "Visible" : "Hidden");
	}
};]]></Script>
            <Bind Name="AppSelect" PreventDefault="True"/>
        </Component>
    </Layer>
    <Layer Name="Table">
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="550.0" X2="550.0" Y1="470.0" Y2="660.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="940.0" X2="940.0" Y1="470.0" Y2="660.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="960.0" X2="680.0" Y1="470.0" Y2="470.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="1320.0" X2="160.0" Y1="660.0" Y2="660.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="1320.0" X2="1320.0" Y1="470.0" Y2="740.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="1320.0" X2="1090.0" Y1="470.0" Y2="470.0"/>
        <Text FontFamily="Arial Rounded MT Bold" FontSize="20.0"
            FontStyle="Normal" FontWeight="Normal"
            HorizontalAlign="Left" Left="190.0" Name="" Opacity="1.0"
            Stroke="#626469" TextDecoration="None" Top="430.0" VerticalAlign="Top"><![CDATA[System]]></Text>
        <Text FontFamily="Arial Rounded MT Bold" FontSize="20.0"
            FontStyle="Normal" FontWeight="Normal"
            HorizontalAlign="Left" Left="580.0" Opacity="1.0"
            Stroke="#626469" TextDecoration="None" Top="455.0" VerticalAlign="Top"><![CDATA[Setpoints]]></Text>
        <Text FontFamily="Arial Rounded MT Bold" FontSize="20.0"
            FontStyle="Normal" FontWeight="Normal"
            HorizontalAlign="Left" Left="970.0" Name="" Opacity="1.0"
            Stroke="#626469" TextDecoration="None" Top="455.0" VerticalAlign="Top"><![CDATA[Parameters]]></Text>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="570.0" X2="330.0" Y1="470.0" Y2="470.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="160.0" X2="160.0" Y1="740.0" Y2="470.0"/>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="160.0" X2="180.0" Y1="470.0" Y2="470.0"/>
        <Text FontFamily="Arial Rounded MT Bold" FontSize="20.0"
            FontStyle="Normal" FontWeight="Normal"
            HorizontalAlign="Left" Left="190.0" Name="" Opacity="1.0"
            Stroke="#626469" TextDecoration="None" Top="455.0" VerticalAlign="Top"><![CDATA[Configuration]]></Text>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="570.0" Name=""
            Top="480.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSptMin">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Minimum Flow Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="570.0" Name=""
            Top="510.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSptMax">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Maximum Flow Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="570.0" Name=""
            Top="540.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSptHtgMin">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Heating Minimum Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="570.0" Name=""
            Top="630.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSptStbyMax">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Standby Maximum Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="570.0" Name=""
            Top="600.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSptStbyMin">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Standby Minimum Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="955.0" Name=""
            Top="515.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="PickupFactor">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Pickup Factor]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0" Units="" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="955.0" Name=""
            Top="485.0" Type="Digital Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="DprAct">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Damper Action]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="CW to Close"
                    State1="CCW to Close" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="State0" Name="State0"/>
                    <Expose Description="" ExposedAttribute="State1" Name="State1"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="955.0" Name=""
            Top="575.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="VelPrOfs">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Velocity Pressure Offset]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="3" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="inWC" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="955.0" Name=""
            Top="605.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="VelPrGn">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Velocity Pressure Gain]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="2" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0" Units="" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="955.0" Name=""
            Top="545.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="DuctArea">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Duct Area]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="2" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="sq. ft." Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="80.0"
            ContentWidth="1160.0" Height="80.0" Left="160.0" Top="660.0" Width="1160.0">
            <Group Name="binds">
                <Bind DynamicUpdates="Enable" Name="AirFlSptMax"/>
                <Bind DynamicUpdates="Enable" Name="AirFlSptMin"/>
                <Bind DynamicUpdates="Disable" Name="AirFlSpt.Priority8"/>
                <Bind DynamicUpdates="Enable" Name="PickupFactor"/>
                <Bind DynamicUpdates="Enable" Name="DuctArea"/>
                <Bind DynamicUpdates="Enable" Name="VelPrGn"/>
                <Bind DynamicUpdates="Enable" Name="VelPrOfs"/>
                <Bind DynamicUpdates="Enable" Name="VelPr"/>
                <Bind DynamicUpdates="Enable" Name="AirFl"/>
            </Group>
            <Component Clip="False" ContentHeight="40.0"
                ContentWidth="150.0" Height="40.0" Left="68.0"
                Name="RstBtn" Top="20.0" Width="150.0">
                <Rectangle Fill="#4FA600" Height="40.0" Name=""
                    RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Width="150.0"/>
                <Rectangle Fill="#009530" Height="40.0" Left="0.0"
                    Name="" RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0.0,1.0">
                        <GradientStop Color="#3FFFFFFF" Offset="0.0"/>
                        <GradientStop Color="#2F000000" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <TextBox FontFamily="Arial Rounded MT Bold"
                    FontSize="20.0" FontStyle="Normal"
                    FontWeight="Normal" Height="40.0"
                    HorizontalAlign="Center" Left="0.0" Name=""
                    Opacity="1.0" Stroke="#000000" TextDecoration="None"
                    Top="0.0" VerticalAlign="Middle"
                        Width="150.0"><![CDATA[Reset]]><Expose
                        ExposedAttribute="Content" Name="Max Button Text"/>
                </TextBox>
                <TargetArea Height="40.0" Name="RstBtn" Width="150.0"/>
            </Component>
            <Component Clip="False" ContentHeight="40.0"
                ContentWidth="150.0" Height="40.0" Left="286.0"
                Name="MaxBtn" Top="20.0" Width="150.0">
                <Rectangle Fill="#4FA600" Height="40.0" Name=""
                    RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Width="150.0"/>
                <Rectangle Fill="#009530" Height="40.0" Left="0.0"
                    Name="" RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0.0,1.0">
                        <GradientStop Color="#3FFFFFFF" Offset="0.0"/>
                        <GradientStop Color="#2F000000" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <TextBox FontFamily="Arial Rounded MT Bold"
                    FontSize="20.0" FontStyle="Normal"
                    FontWeight="Normal" Height="40.0"
                    HorizontalAlign="Center" Left="0.0" Name=""
                    Opacity="1.0" Stroke="#000000" TextDecoration="None"
                    Top="0.0" VerticalAlign="Middle"
                        Width="150.0"><![CDATA[Maximum]]><Expose
                        ExposedAttribute="Content" Name="Max Button Text"/>
                </TextBox>
                <TargetArea Height="40.0" Name="MaxBtn" Width="150.0"/>
            </Component>
            <Component Clip="False" ContentHeight="40.0"
                ContentWidth="150.0" Height="40.0" Left="501.0"
                Name="MinBtn" Top="20.0" Width="150.0">
                <Rectangle Fill="#4FA600" Height="40.0" RadiusX="10.0"
                    RadiusY="10.0" Stroke="None" StrokeWidth="4.0" Width="150.0"/>
                <Rectangle Fill="#009530" Height="40.0" Left="0.0"
                    Name="" RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0.0,1.0">
                        <GradientStop Color="#3FFFFFFF" Offset="0.0"/>
                        <GradientStop Color="#2F000000" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <TextBox FontFamily="Arial Rounded MT Bold"
                    FontSize="20.0" FontStyle="Normal"
                    FontWeight="Normal" Height="40.0"
                    HorizontalAlign="Center" Left="0.0" Opacity="1.0"
                    Stroke="#000000" TextDecoration="None" Top="0.0"
                    VerticalAlign="Middle"
                        Width="150.0"><![CDATA[Minimum]]><Expose
                        ExposedAttribute="Content" Name="Min Button Text"/>
                </TextBox>
                <TargetArea Height="40.0" Left="0.0" Name="MinBtn"
                    Top="0.0" Width="150.0"/>
            </Component>
            <Component Clip="False" ContentHeight="40.0"
                ContentWidth="150.0" Height="40.0" Left="720.0"
                Name="SetBtn" Top="20.0" Width="150.0">
                <Rectangle Fill="#4FA600" Height="40.0" RadiusX="10.0"
                    RadiusY="10.0" Stroke="None" StrokeWidth="4.0" Width="150.0"/>
                <Rectangle Fill="#009530" Height="40.0" Left="0.0"
                    Name="" RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0.0,1.0">
                        <GradientStop Color="#3FFFFFFF" Offset="0.0"/>
                        <GradientStop Color="#2F000000" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <TextBox FontFamily="Arial Rounded MT Bold"
                    FontSize="20.0" FontStyle="Normal"
                    FontWeight="Normal" Height="40.0"
                    HorizontalAlign="Center" Left="0.0" Opacity="1.0"
                    Stroke="#000000" TextDecoration="None" Top="0.0"
                    VerticalAlign="Middle"
                        Width="150.0"><![CDATA[Set Airflow]]><Expose
                        ExposedAttribute="Content" Name="Set Button Text"/>
                </TextBox>
                <TargetArea Height="40.0" Left="0.0" Name="SetBtn"
                    Top="0.0" Width="150.0"/>
            </Component>
            <Component Clip="False" ContentHeight="40.0"
                ContentWidth="150.0" Height="40.0" Left="938.0"
                Name="RlsBtn" Top="20.0" Width="150.0">
                <Rectangle Fill="#4FA600" Height="40.0" RadiusX="10.0"
                    RadiusY="10.0" Stroke="None" StrokeWidth="4.0" Width="150.0"/>
                <Rectangle Fill="#009530" Height="40.0" Left="0.0"
                    Name="" RadiusX="10.0" RadiusY="10.0" Stroke="None"
                    StrokeWidth="4.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0.0,1.0">
                        <GradientStop Color="#3FFFFFFF" Offset="0.0"/>
                        <GradientStop Color="#2F000000" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <TextBox Fill="None" FontFamily="Arial Rounded MT Bold"
                    FontSize="20.0" FontStyle="Normal"
                    FontWeight="Normal" Height="40.0"
                    HorizontalAlign="Center" Left="0.0" Opacity="1.0"
                    Stroke="#000000" TextDecoration="None" Top="0.0"
                    VerticalAlign="Middle"
                        Width="150.0"><![CDATA[Release]]><Expose
                        ExposedAttribute="Content" Name="Set Button Text"/>
                </TextBox>
                <TargetArea Height="40.0" Left="0.0" Name="RlsBtn"
                    Top="0.0" Width="150.0"/>
            </Component>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			down: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Component, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse over event handler
	var over = function(mouse) {
		Mouse.over = true;
		Mouse.target = mouse.target;
		o.updateMouse(Mouse);
	}
	
	// mouse out event handler
	var out = function(mouse) {
		Mouse.over = false;
		Mouse.target = mouse.target;
		o.updateMouse(Mouse);
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.down = false;
		Mouse.target = mouse.target;
		o.updateMouse(Mouse);
	}
	
	//mouse down event handler
	var dwn = function(mouse) {
		Mouse.down = true;
		Mouse.target = mouse.target;
		o.updateMouse(Mouse);
		
	}
	
	// mouse click event handler
	var click = function(mouse) {	
		Mouse.click = true;
		Mouse.target = mouse.target;
		o.click(Mouse);
		Mouse.click = false;			
	}
	
	// create main function interface
	return {
		load: load,
		change: change,				
		over: over,
		out: out,
		up: up,
		dwn: dwn,
		click: click	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {
	evt.preventDefault();	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function over(evt) {
	Main.over({target: String(evt.getTarget().getAttribute("Name"))});	
}

function out(evt) {
	Main.out({target: String(evt.getTarget().getAttribute("Name"))});
}

function dwn(evt) {
	Main.dwn({target: String(evt.getTarget().getAttribute("Name"))});
}

function up(evt) {
	Main.up({target: String(evt.getTarget().getAttribute("Name"))});
}

function click(evt) {
	evt.preventDefault();
	if(+evt.getButton() === 0) {
		Main.click({target: String(evt.getTarget().getAttribute("Name"))});	
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Component Object
 */
Component = {
	init: function(comp) {
		//get display items
		this.rstBtn = Object.construct(Button, comp.getChild("RstBtn"));
		this.maxBtn = Object.construct(Button, comp.getChild("MaxBtn"));
		this.minBtn = Object.construct(Button, comp.getChild("MinBtn"));
		this.setBtn = Object.construct(Button, comp.getChild("SetBtn"));	
		this.rlsBtn = Object.construct(Button, comp.getChild("RlsBtn"));	
		
		//initialize Buttons
		this.rstBtn.update(1);
		this.maxBtn.update(1);
		this.minBtn.update(0);
		this.setBtn.update(0);
		this.rlsBtn.update(0);
		
		// build the binds needed
		var bindList = comp.getElementsByTagName("Bind");
		var i = bindList.length;			
		while(i--) {
			var child = bindList.item(i);
			var name = String(child.getAttribute("Name"));
			if(name === "AirFlSptMax"){
				this.maxSptBind = Object.construct(Bind, child);
			}
			if(name === "AirFlSptMin"){
				this.minSptBind = Object.construct(Bind, child);
			}
			if(name === "AirFlSpt.Priority8"){
				this.sptBind = Object.construct(Bind, child);
			}
			if(name === "PickupFactor"){
				this.pickupBind = Object.construct(Bind, child);
			}
			if(name === "DuctArea"){
				this.areaBind = Object.construct(Bind, child);
			}
			if(name === "VelPrGn"){
				this.gainBind = Object.construct(Bind, child);
			}
			if(name === "VelPrOfs"){
				this.ofsBind = Object.construct(Bind, child);
			}
			if(name === "VelPr"){
				this.velPrBind = Object.construct(Bind, child);
			}
			if(name === "AirFl"){
				this.airFlBind = Object.construct(Bind, child);
			}
		}
		
		// intiate Values
		this.maxSpt = 300;
		this.minSpt = 600;
		this.spt = 300;
		this.pickup = 2950;
		this.area = .79;
		this.gain = 1;
		this.ofs = 0;
		this.velPr = 0;
		this.airFl = 0;
		this.pHi = null;
		this.pLo = null;
		this.fLo = null;
		this.fHi = null;
		this.mode = 0;
	},
	
	update: function(signal) {
		if(this.maxSptBind) {
			if(signal.fbn === this.maxSptBind.fbn) {
				this.maxSpt = +signal.value;
			}
		}
		
		if(this.minSptBind) {
			if(signal.fbn === this.minSptBind.fbn) {
				this.minSpt = +signal.value;
			}
		}
		
		if(this.sptBind) {
			if(signal.fbn === this.sptBind.fbn) {
				this.sptBind.disableUpdates();
				this.spt = +signal.value;
			}
		}	
		
		if(this.pickupBind) {
			if(signal.fbn === this.pickupBind.fbn) {
				this.pickup = +signal.value;
			}
		}
		
		if(this.areaBind) {
			if(signal.fbn === this.areaBind.fbn) {
				this.area = +signal.value;
			}
		}
		
		if(this.gainBind) {
			if(signal.fbn === this.gainBind.fbn) {
				this.gain = +signal.value;
			}
		}
		
		if(this.ofsBind) {
			if(signal.fbn === this.ofsBind.fbn) {
				this.ofs = +signal.value;
			}
		}
		
		if(this.velPrBind) {
			if(signal.fbn === this.velPrBind.fbn) {
				this.velPr = +signal.value;
			}
		}
		
		if(this.airFlBind) {
			if(signal.fbn === this.airFlBind.fbn) {
				this.airFl = +signal.value;
			}
		}
	},
	updateMouse: function(mouse) {
		this.rstBtn.updateMouse(mouse);
		this.maxBtn.updateMouse(mouse);
		this.minBtn.updateMouse(mouse);
		this.setBtn.updateMouse(mouse);
		this.rlsBtn.updateMouse(mouse);
	},
	
	click: function(mouse) {
		switch(String(mouse.target)){
		case "RstBtn":
			// Reset offset & gain;
			if(this.mode !== 2) {
				this.gainBind.write(1);
				this.ofsBind.write(0);
				this.pHi = null;
				this.pLo = null;
				this.fLo = null;
				this.fHi = null;
			}
			break;
		case "MaxBtn":
			if(this.mode === 0) {
				this.mode = 1;
				// Force Setpoint to Max
				this.sptBind.write(this.maxSpt);
			}
			break;
		case "MinBtn":
			// Validate Click
			if(this.pHi !== null && this.mode === 1) {
				this.mode = 2;
				// Force Setpoint to Min
				this.sptBind.write(this.minSpt);
			}
			break;
		case "SetBtn":
			// Validate Click
			if(this.mode !== 0) {
				// Prompt for Airflow
				var input = prompt("Please enter the current airflow.", this.mode === 1 ? this.maxSpt : this.minSpt);
				if(!isNaN(input) && input !== null && this.velPr > 0 && input > 0) {
					var boxConstant = this.pickup * this.area;
					if(this.mode === 1) {
						this.fHi = +input;
						this.pHi = this.velPr;
						var m = Math.pow(this.fHi, 2) / (Math.pow(boxConstant, 2) * this.pHi);
						this.gainBind.write(m);
					} else {
						this.fLo = +input;
						this.pLo = this.velPr;
						var b = (Math.pow(this.fLo, 2) - this.pLo / this.pHi * Math.pow(this.fHi, 2)) / (Math.pow(boxConstant, 2) * (1 - this.pLo / this.pHi));
						var m = (Math.pow(this.fHi / boxConstant, 2) - b) / this.pHi;
						this.gainBind.write(m);
						this.ofsBind.write(b);
					}												
				}
			}				 
			break;
		case "RlsBtn":				
			this.sptBind.relinquish();
			this.mode = 0;
			break;
		default:
			//alert("Unknown Target: " + mouse.target);
		}
		
		// set button colors
		// 0 = Disabled
		// 1 = Enabled
		// 2 = Active
		switch(this.mode) {
		case 0:
			this.rstBtn.update(1);
			this.maxBtn.update(1);
			this.minBtn.update(0);
			this.setBtn.update(0);
			this.rlsBtn.update(0);
			break;
		case 1:
			this.rstBtn.update(1);
			this.maxBtn.update(2);
			this.minBtn.update(this.pHi !== null ? 1 : 0);
			this.setBtn.update(1);
			this.rlsBtn.update(1);
			break;
		case 2:
			this.rstBtn.update(0);
			this.maxBtn.update(0);
			this.minBtn.update(2);
			this.setBtn.update(1);
			this.rlsBtn.update(1);
			break;
		default:
		}			
	}
};

/**==========================================================================================
 * Button Object
 */
Button = {
	init: function(node){
		this.rect = Object.construct(Rectangle, node.getElementsByTagName("Rectangle").item(0));
		this.name = String(node.getAttribute("Name"));
		this.gs0 = Object.construct(GradientStop, node.getElementsByTagName("Rectangle").item(1).getElementsByTagName("LinearGradient").item(0).getElementsByTagName("GradientStop").item(0));
		this.gs1 = Object.construct(GradientStop, node.getElementsByTagName("Rectangle").item(1).getElementsByTagName("LinearGradient").item(0).getElementsByTagName("GradientStop").item(1));
		this.mode = 0;
	},
	update: function(mode) {
		this.mode = mode;
		switch(this.mode) {
		case 0:
			// fill gray
			this.rect.update({fill: "#9fa0a4"});
			break;
		case 1:
			// fill green
			this.rect.update({fill: "#4fa600"});
			break;
		case 2:
			// fill blue
			this.rect.update({fill: "#42b4E6"});
			break;
		default:
		}
	},
	updateMouse: function(mouse) {
		if(mouse.target === this.name) {
			this.gs0.update({color: mouse.down && this.mode === 1 ? "#2F000000" : "#3FFFFFFF"});
			this.gs1.update({color: mouse.down && this.mode === 1 ? "#3FFFFFFF" : "#2F000000"});
			this.rect.update({stroke: mouse.over && this.mode === 1 ? "#42B4E6" : "None", strokeWidth: mouse.over ? "3" : "0"});
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	},
	write: function(val) {
		if(this.fbn) {
			setValue(this.fbn,val);	
		}
	}
};

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fill = this.node.getAttribute("Fill");
			this.stroke = this.node.getAttribute("Stroke");
			this.strokeWidth = this.node.getAttribute("StrokeWidth");
		}
	},
	update: function(props) {
		this.fill = props.fill || this.fill || "#626469";
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Fill", this.fill);
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};

/**==========================================================================================
 * Gradient Stop Object
 */
GradientStop = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.color = this.node.getAttribute("Color");
		}
	},
	update: function(props) {
		this.color = props.color || this.color || "#626469";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Color", this.color);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="20.0"
            ContentWidth="350.0" Height="20.0" Left="570.0" Name=""
            Top="570.0" Type="Analog Value" Width="350.0">
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSptHtgMax">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="200.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="0.0" Width="150.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="200.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Visibility="Visible" Width="200.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="200.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Left" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="200.0"><![CDATA[Heating Maximum Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="150.0"
                    Decimals="0" Fill="#F0080E" Height="20.0"
                    Left="200.0" Name="Value" State0="Ignore"
                    State1="Follow" Stroke="#FFD100" Top="0.0"
                    Units="cfm" Width="150.0">
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="150.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                    <Expose Description="" ExposedAttribute="Units" Name="Units"/>
                    <Expose Description="" ExposedAttribute="Decimals" Name="Decimals"/>
                </Component>
            </Group>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="dwn" OnMouseMove="move" OnMouseOut="out"
                OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {		
		// initialize mouse handler
		Mouse = {
			x: 0,
			y: 0,
			target: null,	// target referenced by event
			click: false,
			over:false		// hover status
		};
		
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	// mouse move handler
	var move = function(mouse) {
	}
	
	// mouse over event handler
	var over = function(mouse) {
	}
	
	// mouse out event handler
	var out = function(mouse) {
	}
	
	// mouse up event handler
	var up = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	//mouse down event handler
	var down = function(mouse) {
		Mouse.target = mouse.target;
	}
	
	// mouse click event handler
	var click = function(mouse) {		
		Mouse.target = mouse.target;	// store mouse target
		Mouse.btn = mouse.btn;			// store mouse button pressed
		Mouse.click = true;				// set mouse click
		o.mouseClick(Mouse);			// update mouse click
		Mouse.click = false;			// reset mouse click
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		move: move,				
		over: over,
		out: out,
		up: up,
		down: down,
		click: click,	
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function move(evt) {
	Main.move({target: evt.getTarget(), x: +evt.getCurrentTargetX(), y: +evt.getCurrentTargetY()});
}

function over(evt) {	
	Main.over({target: evt.getTarget()});
}

function out(evt) {
	Main.out();
}

function dwn(evt) {
}

function up(evt) {
}

function click(evt) {
	var button = +evt.getButton();
	if (button !== 0) return;
	evt.preventDefault();
	Main.click({target: evt.getTarget(), btn: button});	
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			
			var alarmColor = comp.getAttribute("Fill");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
			}
		}
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			if(signal.fbn === this.priBind.fbn) {
				this.priBind.disableUpdates();			
			}
		}
	},
	
	mouseClick: function(mouse) {
		// force the point
		if(this.commandType !== "Program") {
			this.valueBind.displayProperties();							// display value properties
		} else {
			if(this.priBind) {					
				this.priBind.displayProperties();							// display priority properties
			}		
		}				
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Enable");
		}
	},
	disableUpdates: function() {
		if(this.node) {
			this.node.setAttribute("DynamicUpdates", "Disable");
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		if(this.fbn) {
			setValue(this.fbn,null);	
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor) {
		this.normalColor = node.getAttribute("Stroke");
		this.alarmColor = alarmColor;
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;
		
		this.alarm = false;
		this.rect = Object.construct(Rectangle, node);
	},
	update: function(status) {
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		
		this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
            <TargetArea Height="20.0" Left="0.0" Top="0.0" Width="350.0"/>
        </Component>
        <Component Clip="False" ContentHeight="185.0"
            ContentWidth="390.0" Height="185.0" Id="Application Table"
            Left="160.0" Top="455.0" Width="390.0">
            <Group Name="binds">
                <Bind ConfigTable="" EHDropdown="" EHValue=""
                    ElecHeatCheck="" FanCBCheck="" FanCheckbox=""
                    HWDropdown="" HWValue="" HotWaterCheck=""
                    Name="AppSelect" NoFanCheck="" NoReheatCheck=""
                    PFanCheck="" PreventDefault="True" RhtCheckbox=""
                    SFanCheck="" b3865Check="" b3866Check=""/>
            </Group>
            <Group Ctrl="ConfigCtrl" Model="ConfigTable" Name="display">
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="149.5" Ctrl="CheckboxCtrl"
                    Height="20.0" Id="" Left="10.5" Model="FanCheckbox"
                    Name="FanCheckbox" Top="155.0" VisibleBits="6" Width="149.5">
                    <Component Clip="False" ContentHeight="15.0"
                        ContentWidth="15.0" Fill="#BFCEFF" Height="15.0"
                        Left="-0.5" Name="CheckBox" Push="#3F000000"
                        Stroke="#000000" Top="5.0" Width="15.0">
                        <Component Clip="False" ContentHeight="8.0"
                            ContentWidth="7.5" Ctrl="CheckCtrl"
                            Height="10.0" Left="2.5" Model="FanCBCheck"
                            Name="Check" Top="2.5" Visibility="Hidden"
                            VisibleBits="2048" Width="10.0">
                            <Path Fill="#009530" Name="Check"
                                PathData="M2.0,4.0 L0.0,4.0 2.5,8.0 3.5,8.0 7.5,1.0 7.5,0.0 6.0,0.0 3.0,6.0 z"
                                Stroke="None" StrokeWidth="1.0" Visibility="Visible">
                                <Expose
                                    Description="The color of the check mark."
                                    ExposedAttribute="Fill" Name="CheckColor"/>
                            </Path>
                        </Component>
                        <Rectangle Fill="None" Height="13.0" Left="1.0"
                            Name="Edge" RadiusX="1.0" RadiusY="1.0"
                            Stroke="#626469" StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                    </Component>
                    <TextBox FontFamily="Arial" FontSize="15.0"
                        FontStyle="Normal" FontWeight="Normal"
                        Height="20.0" HorizontalAlign="Left" Left="24.5"
                        Opacity="1.0" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle" Width="125.0"><![CDATA[Fan On Warmup]]></TextBox>
                    <TargetArea ConfigTable_click="" FanCBCheck_click=""
                        Height="20.0" Name="FanCheckbox" Width="150.0"/>
                </Component>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="169.5" Ctrl="CheckboxCtrl"
                    Height="20.0" Id="" Left="195.5" Model="RhtCheckbox"
                    Name="RhtCheckbox" Top="155.0" VisibleBits="2040" Width="169.5">
                    <TextBox FontFamily="Arial" FontSize="15.0"
                        FontStyle="Normal" FontWeight="Normal"
                        Height="20.0" HorizontalAlign="Left" Left="24.5"
                        Opacity="1.0" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle" Width="145.0"><![CDATA[Reheat On Warmup]]></TextBox>
                    <Component Clip="False" ContentHeight="15.0"
                        ContentWidth="15.0" Fill="#BFCEFF" Height="15.0"
                        Left="-0.5" Name="CheckBox" Push="#3F000000"
                        Stroke="#000000" Top="5.0" Width="15.0">
                        <Component Clip="False" ContentHeight="8.0"
                            ContentWidth="7.5" Ctrl="CheckCtrl"
                            Height="10.0" Left="2.5" Model="RhtCBCheck"
                            Name="Check" Top="2.5" Visibility="Hidden"
                            VisibleBits="4096" Width="10.0">
                            <Path Fill="#009530" Name=""
                                PathData="M2.0,4.0 L0.0,4.0 2.5,8.0 3.5,8.0 7.5,1.0 7.5,0.0 6.0,0.0 3.0,6.0 z"
                                Stroke="None" Visibility="Visible">
                                <Expose
                                    Description="The color of the check mark."
                                    ExposedAttribute="Fill" Name="CheckColor"/>
                            </Path>
                        </Component>
                        <Rectangle Fill="None" Height="13.0" Left="1.0"
                            Name="Edge" RadiusX="1.0" RadiusY="1.0"
                            Stroke="#626469" StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                    </Component>
                    <TargetArea ConfigTable_click="" Height="20.0"
                        Left="0.0" Name="RhtCheckbox"
                        RhtCBCheck_click="" Top="0.0" Width="170.0"/>
                </Component>
                <Component Clip="False" ContentHeight="65.0"
                    ContentWidth="105.0" Ctrl="RadioCtrl" Height="65.0"
                    Id="" Left="15.0" Model="ModelRadios"
                    Name="ModelRadios" Top="25.0" Width="105.0">
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="104.5" Height="20.0" Id=""
                        Left="0.5" Name="865" Top="20.0" Width="104.5">
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="None"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#009530" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0"
                                HiddenBits="1" Left="3.5"
                                Model="b3865Check" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="80.0"><![CDATA[b3 865-V]]></TextBox>
                        <TargetArea ConfigTable_click="" Height="20.0"
                            ModelRadios_click="" Name="865" Width="105.0"/>
                    </Component>
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="104.5" Height="20.0" Left="0.5"
                        Name="866" Top="45.0" Width="104.5">
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="#BFCEFF"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0" Left="3.5"
                                Model="b3866Check" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden"
                                VisibleBits="1" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="80.0"><![CDATA[b3 866-V]]></TextBox>
                        <TargetArea ConfigTable_click="" Height="20.0"
                            Left="0.0" ModelRadios_click="" Name="866"
                            Top="0.0" Width="105.0"/>
                    </Component>
                    <TextBox FontFamily="Arial" FontSize="15.0"
                        FontStyle="Normal" FontWeight="Bold"
                        Height="20.0" HorizontalAlign="Center"
                        Left="0.0" Opacity="1.0" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle" Width="100.0"><![CDATA[Model Select]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="90.0"
                    ContentWidth="115.0" Ctrl="RadioCtrl" Height="90.0"
                    Id="" Left="130.0" Model="FanRadios"
                    Name="FanRadios" Top="25.0" Width="115.0">
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="104.5" Height="20.0" Left="5.5"
                        Name="NoFan" Top="20.0" Width="104.5">
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="#BFCEFF"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0"
                                HiddenBits="6" Left="3.5"
                                Model="NoFanCheck" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="80.0"><![CDATA[No Fan]]></TextBox>
                        <TargetArea ConfigTable_click=""
                            FanRadios_click="" Height="20.0" Left="0.0"
                            Name="NoFan" Top="0.0" Width="105.0"/>
                    </Component>
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="109.5" Height="20.0" Left="5.5"
                        Name="PFan" Top="45.0" Width="109.5">
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="85.0"><![CDATA[Parallel Fan]]></TextBox>
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="#BFCEFF"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0" Left="3.5"
                                Model="PFanCheck" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden"
                                VisibleBits="2" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TargetArea ConfigTable_click=""
                            FanRadios_click="" Height="20.0" Left="0.0"
                            Name="PFan" Top="0.0" Width="105.0"/>
                    </Component>
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="104.5" Height="20.0" Left="5.5"
                        Name="SFan" Top="70.0" Width="104.5">
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="80.0"><![CDATA[Series Fan]]></TextBox>
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="#BFCEFF"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0" Left="3.5"
                                Model="SFanCheck" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden"
                                VisibleBits="4" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TargetArea ConfigTable_click=""
                            FanRadios_click="" Height="20.0" Left="0.0"
                            Name="SFan" Top="0.0" Width="105.0"/>
                    </Component>
                    <TextBox FontFamily="Arial" FontSize="15.0"
                        FontStyle="Normal" FontWeight="Bold"
                        Height="20.0" HorizontalAlign="Center"
                        Left="0.0" Opacity="1.0" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle" Width="115.0"><![CDATA[Fan Select]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="120.0"
                    ContentWidth="120.0" Ctrl="RadioCtrl" Height="120.0"
                    Left="255.0" Model="ReheatRadios"
                    Name="ReheatRadios" Top="25.0" Width="120.0">
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="114.5" Height="20.0" Left="5.5"
                        Name="ElecHeat" Top="45.0" Width="114.5">
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="#BFCEFF"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0" Left="3.5"
                                Model="ElecHeatCheck" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden"
                                VisibleBits="120" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="90.0"><![CDATA[Electric Heat]]></TextBox>
                        <TargetArea ConfigTable_click="" Height="20.0"
                            Left="0.0" Name="ElecHeat"
                            ReheatRadios_click="" Top="0.0" Width="105.0"/>
                    </Component>
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="104.5" Height="20.0" Left="5.5"
                        Name="HotWater" Top="70.0" Width="104.5">
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="80.0"><![CDATA[Hot Water]]></TextBox>
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="#BFCEFF"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0" Left="3.5"
                                Model="HotWaterCheck" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden"
                                VisibleBits="1920" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TargetArea ConfigTable_click="" Height="20.0"
                            Left="0.0" Name="HotWater"
                            ReheatRadios_click="" Top="0.0" Width="105.0"/>
                    </Component>
                    <Component Clip="False" ContentHeight="20.0"
                        ContentWidth="114.5" Height="20.0" Id=""
                        Left="5.5" Name="NoReheat" Top="20.0" Width="114.5">
                        <Component Clip="False" ContentHeight="15.0"
                            ContentWidth="15.0" Fill="None"
                            Height="15.0" Left="-0.5" Name="RadioButton"
                            Push="#3F000000" RadioButtonValue="1"
                            Stroke="#404040" Top="5.0" Width="15.0">
                            <Ellipse Ctrl="RadioCheckCtrl"
                                Fill="#009530" Height="8.0"
                                HiddenBits="2040" Left="3.5"
                                Model="NoReheatCheck" Name="Check"
                                Opacity="1.0" Stroke="None"
                                StrokeDashArray="0.0" StrokeWidth="1.0"
                                Top="3.5" Visibility="Hidden" Width="8.0">
                                <Expose
                                    Description="The color of the knob."
                                    ExposedAttribute="Fill" Name="KnobColor"/>
                            </Ellipse>
                            <Ellipse Fill="None" Height="13.0"
                                Left="1.0" Name="Edge" Stroke="#626469"
                                StrokeWidth="2.0" Top="1.0" Width="13.0"/>
                        </Component>
                        <TextBox FontFamily="Arial" FontSize="15.0"
                            FontStyle="Normal" FontWeight="Normal"
                            Height="20.0" HorizontalAlign="Left"
                            Left="24.5" Opacity="1.0" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle" Width="90.0"><![CDATA[No Reheat]]></TextBox>
                        <TargetArea ConfigTable_click="" Height="20.0"
                            Left="0.0" Name="NoReheat"
                            ReheatRadios_click="" Top="0.0" Width="105.0"/>
                    </Component>
                    <TextBox FontFamily="Arial" FontSize="15.0"
                        FontStyle="Normal" FontWeight="Bold"
                        Height="20.0" HorizontalAlign="Center"
                        Left="0.0" Opacity="1.0" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle" Width="120.0"><![CDATA[Reheat Select]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="120.0" Ctrl="DropdownCtrl"
                    Height="20.0" Left="255.5" Model="EHDropdown"
                    Name="EHDropdown" Top="125.0" Visibility="Hidden"
                    VisibleBits="120" Width="120.0">
                    <Group Name="display">
                        <Group Name="menu" Visibility="Hidden">
                            <Rectangle Fill="#FFFFFF" Height="1.0"
                                Left="0.0" Name="bgd" RadiusX="5.0"
                                RadiusY="5.0" Stroke="#626469" Top="0.0" Width="120.0"/>
                        </Group>
                        <Rectangle Fill="#F7F7F6" Height="20.0"
                            Left="0.0" Opacity="1.0" RadiusX="5"
                            RadiusY="5" Stroke="#9FA0A4"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="120.0">
                            <LinearGradient EndPoint="0,1">
                                <GradientStop Color="#CECFD2" Offset="0"/>
                                <GradientStop Color="#F7F7F6" Offset=".4"/>
                                <GradientStop Color="#F7F7F6" Offset="1.0"/>
                            </LinearGradient>
                        </Rectangle>
                        <Component Clip="False" ContentHeight="20.0"
                            ContentWidth="20.0" Height="20.0"
                            Left="100.0" Name="ddBtn" Top="0.0" Width="20.0">
                            <Path Name="btn"
                                PathData="M0.0,0.0 C5.0,0.0 10.0,0.0 15.0,0.0 18.0,0.0 20.0,2.0 20.0,5.0 20.0,8.0 20.0,12.0 20.0,15.0 20.0,18.0 17.965000000000003,19.93 15.0,20.0 10.0,20.0 5.0,20.0 0.0,20.0 0.0,15.0 0.0,5.0 0.0,0.0"
                                Stroke="#626469" StrokeDashArray="0.0" StrokeWidth="1.0">
                                <LinearGradient Attribute="Fill"
                                    EndPoint="0,1" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                    <GradientStop Color="#FCFCFC" Offset="0.0"/>
                                    <GradientStop Color="#DEDFE0" Offset="1.0"/>
                                </LinearGradient>
                            </Path>
                            <Path Fill="#626469" Name="arrow"
                                PathData="M6.0,8.0 L14.0,8.0 10.0,12.0"
                                Stroke="None" StrokeDashArray="0.0" StrokeWidth="2"/>
                        </Component>
                        <TextBox BitOffset="3" Ctrl="DDValueCtrl"
                            Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Item0="1 Stage"
                            Item1="2 Stages" Item2="3 Stages"
                            Item3="Proportional" Left="0.0"
                            Model="EHValue" Name="value"
                            Stroke="#000000" TextDecoration="None"
                            Top="0.0" VerticalAlign="Middle"
                                Width="100.0"><![CDATA[...]]><Expose
                                ExposedAttribute="Content" Name="Point Content"/>
                            <Expose ExposedAttribute="Item0" Name="Item0"/>
                            <Expose ExposedAttribute="Item1" Name="Item1"/>
                            <Expose ExposedAttribute="Item2" Name="Item2"/>
                            <Expose ExposedAttribute="Item3" Name="Item3"/>
                        </TextBox>
                        <TargetArea Height="21.0" Name="EHDropdown" Width="120.0"/>
                    </Group>
                </Component>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="120.0" Ctrl="DropdownCtrl"
                    Height="20.0" Left="255.0" Model="HWDropdown"
                    Name="HWDropdown" Top="125.0" Visibility="Hidden"
                    VisibleBits="1920" Width="120.0">
                    <Group Name="display">
                        <Group Name="menu" Visibility="Hidden">
                            <Rectangle Fill="#FFFFFF" Height="1.0"
                                Left="0.0" Name="bgd" RadiusX="5.0"
                                RadiusY="5.0" Stroke="#626469" Top="0.0" Width="120.0"/>
                        </Group>
                        <Rectangle Fill="#F7F7F6" Height="20.0"
                            Left="0.0" Opacity="1.0" RadiusX="5"
                            RadiusY="5" Stroke="#9FA0A4"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="120.0">
                            <LinearGradient EndPoint="0,1">
                                <GradientStop Color="#CECFD2" Offset="0"/>
                                <GradientStop Color="#F7F7F6" Offset=".4"/>
                                <GradientStop Color="#F7F7F6" Offset="1.0"/>
                            </LinearGradient>
                        </Rectangle>
                        <Component Clip="False" ContentHeight="20.0"
                            ContentWidth="20.0" Height="20.0"
                            Left="100.0" Name="ddBtn" Top="0.0" Width="20.0">
                            <Path Name="btn"
                                PathData="M0.0,0.0 C5.0,0.0 10.0,0.0 15.0,0.0 18.0,0.0 20.0,2.0 20.0,5.0 20.0,8.0 20.0,12.0 20.0,15.0 20.0,18.0 17.965000000000003,19.93 15.0,20.0 10.0,20.0 5.0,20.0 0.0,20.0 0.0,15.0 0.0,5.0 0.0,0.0"
                                Stroke="#626469" StrokeDashArray="0.0" StrokeWidth="1.0">
                                <LinearGradient Attribute="Fill"
                                    EndPoint="0,1" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                    <GradientStop Color="#FCFCFC" Offset="0.0"/>
                                    <GradientStop Color="#DEDFE0" Offset="1.0"/>
                                </LinearGradient>
                            </Path>
                            <Path Fill="#626469" Name="arrow"
                                PathData="M6.0,8.0 L14.0,8.0 10.0,12.0"
                                Stroke="None" StrokeDashArray="0.0" StrokeWidth="2"/>
                        </Component>
                        <TextBox BitOffset="7" Ctrl="DDValueCtrl"
                            Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Item0="Floating"
                            Item1="Modulating" Item2="2 Position"
                            Left="0.0" Model="HWValue" Name="value"
                            Stroke="#000000" TextDecoration="None"
                            Top="0.0" VerticalAlign="Middle"
                                Width="100.0"><![CDATA[...]]><Expose
                                ExposedAttribute="Content" Name="Point Content"/>
                            <Expose ExposedAttribute="Item0" Name="Item0"/>
                            <Expose ExposedAttribute="Item1" Name="Item1"/>
                            <Expose ExposedAttribute="Item2" Name="Item2"/>
                        </TextBox>
                        <TargetArea Height="21.0" Name="HWDropdown" Width="120.0"/>
                    </Group>
                </Component>
            </Group>
            <Script Name="AppSelect" OnDocumentLoad="load"
                OnMouseClick="click" OnMouseDown="" OnMouseMove=""
                OnMouseOut="out" OnMouseOver="over" OnMouseUp="up" OnSignalChange="change"><![CDATA[/**==========================================================================================
 * Main Object
 */
var main = {
	load: function(e) {
		var comp = e.getCurrentTarget(),
			children = getChildrenByAttribute(comp, "Model");
			
		this.models = {};
		for(var i = 0, max = children.length; i < max; i += 1) {
			var child = children[i],
				model = child.getAttribute("Model"),
				ctrl = String(child.getAttribute("Ctrl"));
			this.models[model] = Object.create(eval(ctrl));
			this.models[model].init(child);							
		}
	},
	
	change: function(e) {
		e.preventDefault();
		var bind = e.getTarget(),
			attbList = bind.attributes;
				
		for(var i = 0, max = attbList.length; i < max; i += 1) {
			var attb = attbList.item(i).nodeName;
			if(this.models.hasOwnProperty(attb)) {
				this.models[attb].update(e);
			}
		}
	},
	
	// ignore all clicks, handled on up instead
	click: function(e) {
		e.preventDefault();
	},
	
	// up is actual click look at Target Areas
	up: function(e) {
		var trigger = e.getTarget(),
			attbList = trigger.attributes;
		
		for(var i = 0, max = attbList.length; i < max; i += 1) {
			var attb = String(attbList.item(i).nodeName).split("_")[0],
				event = String(attbList.item(i).nodeName).split("_")[1];
			if(event === "click") {
				if(this.models.hasOwnProperty(attb)) {
					if(!isUndefined(this.models[attb].click)) {
						this.models[attb].click(e);
					}
				}
			}
		}
	},
	
	// hover look at Target Areas
	over: function(e) {
		var trigger = e.getTarget(),
			attbList = trigger.attributes;
		
		for(var i = 0, max = attbList.length; i < max; i += 1) {
			var attb = String(attbList.item(i).nodeName).split("_")[0],
				event = String(attbList.item(i).nodeName).split("_")[1];
			if(event === "over") {
				if(this.models.hasOwnProperty(attb)) {
					if(!isUndefined(this.models[attb].over)) {
						this.models[attb].over(e);
					}
				}
			}
		}
	},
	
	// out look at Target Areas
	out: function(e) {
		var trigger = e.getTarget(),
			attbList = trigger.attributes;
		
		for(var i = 0, max = attbList.length; i < max; i += 1) {
			var attb = String(attbList.item(i).nodeName).split("_")[0],
				event = String(attbList.item(i).nodeName).split("_")[1];
			if(event === "out") {
				if(this.models.hasOwnProperty(attb)) {
					if(!isUndefined(this.models[attb].out)) {
						this.models[attb].out(e);
					}
				}
			}
		}
	}
};

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	main.load(evt);
}

function change(evt) {	
	main.change(evt);
}

function click(evt) {
	main.click(evt);
}

function up(evt) {
	main.up(evt);
}

function over(evt) {
	main.over(evt);
}

function out(evt) {
	main.out(evt);
}

/**==========================================================================================
 * Helper Functions
 */
var isUndefined = function(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
};

var getBool = function(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
};

//checks if object is of type undefined
if (!Object.isUndefined) {
	Object.isUndefined = function(object) {
		return typeof object === "undefined";
	};
}

//checks if object is part of DOM, should only be used on nodes (good to check against CDATA)
if (!Object.isDOM) {
	Object.isDOM = function(obj) {
		if (!Object.isUndefined(obj) && obj.nodeName) {
	    	switch (obj.nodeType) {
	    		case 1: return 'element';
	    		case 3: return (/\S/).test(obj.nodeValue) ? 'textnode' : 'whitespace';
	    	}
	    }
	    return false;
	};
}

//returns an array children nodes that have a defined attribute, ex: getChildrenByAttribute(view,"Model")
var getChildrenByAttribute = function(node, attb){
	var v = [];
	if (Object.isDOM(node)) {
		if (node.hasAttribute(attb)) {
			if (node.getAttribute(attb)!="") {			
				v.push(node);
			}
		}
		if (node.hasChildNodes()) {
			var c = node.getChildNodes();			
			for(var i = 0; i < c.length; i++) {
				v = v.concat(getChildrenByAttribute(c.item(i), attb));
			}
		}
	}
	return v;
}

// shim for pre 1.6 systems
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

/**==========================================================================================
 * Application Objects
 */
var ConfigCtrl = {
	init: function(node) {		
		this.bits = [];
	},
	
	update: function(e) {
		if(isUndefined(this.selectBind)) {
			this.selectBind = Object.create(bindObject);
			this.selectBind.init(e.getTarget());
		}
		// get new value
		var value = +e.getValue();
		
		// convert base10 to base2, then to an array of bits
		var binaryString = Math.round(value).toString(2);
		
		// add leading zeros
		for(var i = binaryString.length, max = this.bits.length; i < max; i += 1) {
			binaryString = "0" + binaryString;
		}
		
		
		var stringArray = binaryString.split("");

		// convert string array to boolean array.
		for(var i = stringArray.length - 1, max = 0; i >= max; i -= 1) {
			this.bits[stringArray.length - 1 - i] = getBool(stringArray[i]);
		}
	},
	
	click: function(e) {
		// get the name of the target area
		var targetName = String(e.getTarget().getAttribute("Name"));
		
		switch(targetName) {
			case "FanCheckbox":
				this.bits[11] = !this.bits[11];
				break;
			case "RhtCheckbox":
				this.bits[12] = !this.bits[12];
				break;
			case "865":
				this.bits[0] = false;
				break;
			case "866":
				this.bits[0] = true;
				break;
			case "NoFan":
				this.bits[1] = false;
				this.bits[2] = false;
				this.bits[11] = false;
				break;
			case "PFan":
				this.bits[1] = true;
				this.bits[2] = false;
				break;
			case "SFan":
				this.bits[1] = false;
				this.bits[2] = true;
				break;
			case "NoReheat":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = false;
				this.bits[12] = false;
				break;
			case "ElecHeat":
			case "ElecHeat0":
				this.bits[3] = true;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = false;
				break;
			case "ElecHeat1":
				this.bits[3] = false;
				this.bits[4] = true;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = false;
				break;
			case "ElecHeat2":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = true;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = false;
				break;
			case "ElecHeat3":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = true;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = false;
				break;
			case "HotWater":
			case "HotWater0":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = true;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = false;
				break;
			case "HotWater1":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = true;
				this.bits[9] = false;
				this.bits[10] = false;
				break;
			case "HotWater2":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = true;
				this.bits[10] = false;
				break;
			case "HotWater3":
				this.bits[3] = false;
				this.bits[4] = false;
				this.bits[5] = false;
				this.bits[6] = false;
				this.bits[7] = false;
				this.bits[8] = false;
				this.bits[9] = false;
				this.bits[10] = true;
				break;
			default:
		}
		
		this.writeSelection();
	},
	
	writeSelection: function() {
		var selection = 0;
		var j = 1;
		for(var i = 0, max = this.bits.length; i < max; i += 1) {
			// if bit is true add the power of 2
			if(this.bits[i]) {
				selection += j;
			}
			j *= 2;
		}
		if(!isUndefined(this.selectBind)) {
			this.selectBind.write(selection);
		}
	}
};

var CheckCtrl = {
	init: function(node) {
		this.node = node;
		this.checked = false;
		
		// get the visibility bits
		this.visibleBits = 0;
		if(this.node.hasAttribute("VisibleBits")) {
			this.visibleBits = +this.node.getAttribute("VisibleBits");
		}
	},
	update: function(e) {
		var val = +e.getValue();
		this.node.setAttribute("Visibility", (val & this.visibleBits) > 0 ? "Visible" : "Hidden");
	},
	click: function(e) {
		this.checked = !this.checked;
		this.node.setAttribute("Visibility", this.checked ? "Visible" : "Hidden");
	}
};

var CheckboxCtrl = {
	init: function(node) {
		this.node = node;
		
		// get the visibility bits
		this.visibleBits = 0;
		if(this.node.hasAttribute("VisibleBits")) {
			this.visibleBits = +this.node.getAttribute("VisibleBits");
		}
		
	},
	update: function(e) {
		var val = +e.getValue();
		this.node.setAttribute("Visibility", (val & this.visibleBits) > 0 ? "Visible" : "Hidden");
	}
};

var RadioCtrl = {
	init: function(node) {
		this.node = node;
		var children = this.node.getChildNodes();
		this.radios = {};
		for(var i = 0, max = children.length; i < max; i += 1) {
			var child = children.item(i);
			var tagName = String(child.getTagName());
			var name = String(child.getAttribute("Name"));
			if(tagName === "Component") {
				this.radios[name] = Object.create(radioObject);
				this.radios[name].init(child);
			}
		}
	},
	click: function(e) {
		var targetName = String(e.getTarget().getAttribute("Name"));
		for(var key in this.radios) {
			var radio = this.radios[key];
			radio.render(targetName === key);
		}
	}
};

var RadioCheckCtrl = {
	init: function(node) {
		this.node = node;
		
		// get the visibility bits
		this.visibleBits = 0;
		if(this.node.hasAttribute("VisibleBits")) {
			this.visibleBits = +this.node.getAttribute("VisibleBits");
		}
		
		// get the hidden bits
		this.hiddenBits = 0;
		if(this.node.hasAttribute("HiddenBits")) {
			this.hiddenBits = +this.node.getAttribute("HiddenBits");
		}
	},
	update: function(e) {
		var val = +e.getValue();
		this.node.setAttribute("Visibility", (val & this.visibleBits) > 0 ? "Visible" : "Hidden");
		
		if(this.hiddenBits !== 0) {
			this.node.setAttribute("Visibility", (val & this.hiddenBits) > 0 ? "Hidden" : "Visible");
		}
	}
};

var radioObject = {
	init: function(node) {
		this.check = node.getChildRecursive("Check");
	},
	
	render: function(b) {
		this.check.setAttribute("Visibility", b ? "Visible" : "Hidden");
	}
};

var DropdownCtrl = {
	init: function(node) {
		this.node = node;
		
		// get the visibility bits
		this.visibleBits = 0;
		if(this.node.hasAttribute("VisibleBits")) {
			this.visibleBits = +this.node.getAttribute("VisibleBits");
		}
	},
	update: function(e) {
		var val = +e.getValue();
		this.node.setAttribute("Visibility", (val & this.visibleBits) > 0 ? "Visible" : "Hidden");
	},
	click: function(e) {
	}
};

var DDValueCtrl = {
	init: function(node) {
		this.node = node;
		
		this.items = [];
		var i = 0;
		while(this.node.hasAttribute("Item" + i)) {
			this.items.push(String(this.node.getAttribute("Item" + i)));
			i += 1;
		}
		
		this.bitOffset = 0;
		if(this.node.hasAttribute("BitOffset")) {
			this.bitOffset = +this.node.getAttribute("BitOffset");
		}
	},
	update: function(e) {
		var val = +e.getValue();
		
		// determine correct value
		var content = "...";
		for(var i = 0, max = this.items.length; i < max; i += 1) {
			if((val & Math.pow(2, i + this.bitOffset)) > 0) {
				content = this.items[i];
				break;
			}
		}
		this.node.setAttribute("Content", content);
	}
};

/**==========================================================================================
 * Bind Object
 */
var bindObject = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
			this.name = String(this.node.getAttribute("Name"));
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	unForce: function() {
		try {
			if(this.fbn) {
				setForce(this.fbn, false);
			}
		} catch(err) {
		}
	},
	inService: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn, false);	
			}
		} catch(err) {
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn, null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};]]></Script>
        </Component>
        <Text FontFamily="Arial Rounded MT Bold" FontSize="20.0"
            FontStyle="Normal" FontWeight="Normal"
            HorizontalAlign="Left" Left="970.0" Name="" Opacity="1.0"
            Stroke="#626469" TextDecoration="None" Top="430.0" VerticalAlign="Top"><![CDATA[Box]]></Text>
        <Line Opacity="1.0" Stroke="#87D300" StrokeDashArray="0.0"
            StrokeWidth="2.0" X1="1320.0" X2="160.0" Y1="740.0" Y2="740.0"/>
    </Layer>
    <Layer Name="Points">
        <Component Clip="False" ContentHeight="40.0"
            ContentWidth="100.0" Fill="#F0080E" Height="40.0" Id="SaTmp"
            Left="860.0" Name="" Override="No" Prompt="No"
            Stroke="#FFD100" Top="120.0" Type="Analog Input"
            Version="1.19b" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="SaTmp">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="OOSBind" DynamicUpdates="Enable" Name="SaTmp.OutOfService">
                    <Expose ExposedAttribute="Name" Name="OOSBind"/>
                </Bind>
                <Bind Description="AlarmBind" Name="SaTmpFal" PreventDefault="True">
                    <Expose ExposedAttribute="Name" Name="AlarmBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Supply Temp]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20.0" Units="°F" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="24.0"
                    ContentWidth="154.0" Height="24.0" Left="0"
                    Name="tooltip" Top="0" Visibility="Hidden" Width="154.0">
                    <Rectangle Fill="#3F000000" Height="20.0" Left="0.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="4.0" Width="150.0"/>
                    <Rectangle Fill="#FBEB8B" Height="20.0" Left="4.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="0.0" Width="150.0"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="14" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Left" Left="4.0" Opacity="1.0"
                        Stroke="#000000" TextDecoration="None" Top="0.0"
                        VerticalAlign="Top" Width="150.0"><![CDATA[Right click to Release]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="60" ContentWidth="100.0"
            Fill="#F0080E" Height="60.0" Id="DprPosFbk" Left="510.0"
            Name="" Stroke="#FFD100" Top="120.0" Type="Analog Output"
            Version="2.0" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="DprPosFbk" PreventDefault="False">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="DprPos.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="40" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="40"
                    ContentWidth="100.0" Height="40" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="40" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="40"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Damper Position]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="40" Units="%" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="40" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="40" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="60" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40.0"
            ContentWidth="100.0" Fill="#F0080E" Height="40.0" Id="RmTmp"
            Left="1110.0" Name="" Override="Yes" Prompt="Yes"
            Stroke="#FFD100" Top="200.0" Type="Analog Input"
            Version="1.19b" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="RmTmp">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="OOSBind" DynamicUpdates="Enable"
                    Name="RmTmp.OutOfService" PreventDefault="False">
                    <Expose ExposedAttribute="Name" Name="OOSBind"/>
                </Bind>
                <Bind Description="AlarmBind" Name="RmTmpHal" PreventDefault="True">
                    <Expose ExposedAttribute="Name" Name="AlarmBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Room Temp]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20.0" Units="°F" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="24.0"
                    ContentWidth="154.0" Height="24.0" Left="0"
                    Name="tooltip" Top="0" Visibility="Hidden" Width="154.0">
                    <Rectangle Fill="#3F000000" Height="20.0" Left="0.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="4.0" Width="150.0"/>
                    <Rectangle Fill="#FBEB8B" Height="20.0" Left="4.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="0.0" Width="150.0"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="14" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Left" Left="4.0" Opacity="1.0"
                        Stroke="#000000" TextDecoration="None" Top="0.0"
                        VerticalAlign="Top" Width="150.0"><![CDATA[Right click to Release]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40" ContentWidth="100.0"
            Fill="#F0080E" Height="40.0" Id="RmTmpCspt" Left="1110.0"
            Name="" Override="No" Prompt="No" Stroke="#FFD100"
            Top="100.0" Type="Analog Value" Version="1.19b" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="RmTmpCspt">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="RmTmpCspt.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20.0" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Cooling SP]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20.0" Units="°F" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="24.0"
                    ContentWidth="154.0" Height="24.0" Left="0"
                    Name="tooltip" Top="0" Visibility="Hidden" Width="154.0">
                    <Rectangle Fill="#3F000000" Height="20.0" Left="0.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="4.0" Width="150.0"/>
                    <Rectangle Fill="#FBEB8B" Height="20.0" Left="4.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="0.0" Width="150.0"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="14" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Left" Left="4.0" Opacity="1.0"
                        Stroke="#000000" TextDecoration="None" Top="0.0"
                        VerticalAlign="Top" Width="150.0"><![CDATA[Right click to Release]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20.0" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20.0" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40" ContentWidth="100.0"
            Fill="#F0080E" Height="40.0" Id="RmTmpHspt" Left="1110.0"
            Name="" Stroke="#FFD100" Top="150.0" Type="Analog Value"
            Version="2.0" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="RmTmpHspt">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="RmTmpHspt.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20.0" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Heating SP]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20.0" Units="°F" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="24.0"
                    ContentWidth="154.0" Height="24.0" Left="0"
                    Name="tooltip" Top="0" Visibility="Hidden" Width="154.0">
                    <Rectangle Fill="#3F000000" Height="20.0" Left="0.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="4.0" Width="150.0"/>
                    <Rectangle Fill="#FBEB8B" Height="20.0" Left="4.0"
                        Opacity="1.0" RadiusX="0.0" RadiusY="0.0"
                        Stroke="None" StrokeDashArray="0.0"
                        StrokeWidth="1.0" Top="0.0" Width="150.0"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="14" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Left" Left="4.0" Opacity="1.0"
                        Stroke="#000000" TextDecoration="None" Top="0.0"
                        VerticalAlign="Top" Width="150.0"><![CDATA[Right click to Release]]></TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20.0" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20.0" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40" ContentWidth="100.0"
            Fill="#F0080E" Height="40.0" Id="AirFl" Left="300.0" Name=""
            Stroke="#FFD100" Top="230.0" Type="Analog Output"
            Version="2.0" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFl">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="AirFl.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="100.0" Height="20" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Air Flow]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="0" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20" Units="cfm" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="60" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40.0"
            ContentWidth="100.0" Fill="#F0080E" Height="40.0" Id="Eh2"
            Left="770.0" Name="" Stroke="#FFD100" Top="340.0"
            Type="Digital Output" Version="2.0" Visibility="Hidden" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="Rht2Cmd">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="Rht2Cmd.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
                <Bind Name="AppSelect" PreventDefault="True"/>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="-30"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="160"><![CDATA[Eh2 Command]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" State0="Off" State1="On"
                    Stroke="#FFD100" Top="20.0" Units="%" Width="100.0">
                    <Expose ExposedAttribute="State0" Name="State0"/>
                    <Expose ExposedAttribute="State1" Name="State1"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		this.comp = comp;
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
				if(String(child.getAttribute("Name")) === "AppSelect") {
					this.selectBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		if(this.selectBind) {
			if(signal.fbn === this.selectBind.fbn) {
				var binaryString = Math.round(+signal.value).toString(2);
				var bit3 = binaryString.slice(-4,-3) === "1" ? true : false;
				var bit4 = binaryString.slice(-5,-4) === "1" ? true : false;
				var bit5 = binaryString.slice(-6,-5) === "1" ? true : false;
				this.comp.setAttribute("Visibility", bit4 || bit5 ? "Visible" : "Hidden");
			}
		}
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40.0"
            ContentWidth="100.0" Fill="#F0080E" Height="40.0" Id="Eh1"
            Left="770.0" Name="" Stroke="#FFD100" Top="290.0"
            Type="Digital Output" Version="2.0" Visibility="Hidden" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="Rht1Cmd">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="Rht1Cmd.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
                <Bind Name="AppSelect" PreventDefault="True"/>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="-30"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="160"><![CDATA[Eh1 Command]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" State0="Off" State1="On"
                    Stroke="#FFD100" Top="20.0" Units="%" Width="100.0">
                    <Expose ExposedAttribute="State0" Name="State0"/>
                    <Expose ExposedAttribute="State1" Name="State1"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		this.comp = comp;
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
				if(String(child.getAttribute("Name")) === "AppSelect") {
					this.selectBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		if(this.selectBind) {
			if(signal.fbn === this.selectBind.fbn) {
				var binaryString = Math.round(+signal.value).toString(2);
				var bit3 = binaryString.slice(-4,-3) === "1" ? true : false;
				var bit4 = binaryString.slice(-5,-4) === "1" ? true : false;
				var bit5 = binaryString.slice(-6,-5) === "1" ? true : false;
				this.comp.setAttribute("Visibility", bit3 || bit4 || bit5 ? "Visible" : "Hidden");
			}
		}
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40.0"
            ContentWidth="100.0" Fill="#F0080E" Height="40.0" Id="PFan"
            Left="530.0" Name="" Stroke="#FFD100" Top="380.0"
            Type="Digital Output" Version="2.0" Visibility="Hidden" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="FanCmd.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
                <Bind Name="AppSelect" PreventDefault="True"/>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="-30"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="160"><![CDATA[Parallel Fan]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" State0="Stop" State1="Start"
                    Stroke="#FFD100" Top="20.0" Units="%" Width="100.0">
                    <Expose ExposedAttribute="State0" Name="State0"/>
                    <Expose ExposedAttribute="State1" Name="State1"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		this.comp = comp;
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
				if(String(child.getAttribute("Name")) === "AppSelect") {
					this.selectBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		if(this.selectBind) {
			if(signal.fbn === this.selectBind.fbn) {
				var binaryString = Math.round(+signal.value).toString(2);
				this.comp.setAttribute("Visibility", binaryString.slice(-2,-1) === "1" ? "Visible" : "Hidden");
			}
		}
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40" ContentWidth="100.0"
            Fill="#F0080E" Height="40.0" Id="AirFlSpt" Left="300.0"
            Name="" Stroke="#FFD100" Top="190.0" Type="Analog Output"
            Version="2.0" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="AirFlSpt">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="AirFlSpt.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="100.0" Height="20" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Flow Setpoint]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="0" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20" Units="cfm" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="60" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40" ContentWidth="100.0"
            Fill="#F0080E" Height="40.0" Id="RhtVlv" Left="770.0"
            Name="" Stroke="#FFD100" Top="370.0" Type="Analog Output"
            Version="2.0" Visibility="Hidden" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="RhtPos">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                    <ConvertStatus/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="RhtPos.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
                <Bind Name="AppSelect" PreventDefault="True"/>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="100.0" Height="20" Left="0.0"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="100.0"><![CDATA[Reheat Valve]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="0" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" Stroke="#FFD100" Top="20" Units="%" Width="100.0">
                    <Expose ExposedAttribute="Decimals" Name="Decimals"/>
                    <Expose ExposedAttribute="Units" Name="Units"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="60" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		this.comp = comp;
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
				if(String(child.getAttribute("Name")) === "AppSelect") {
					this.selectBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		if(this.selectBind) {
			if(signal.fbn === this.selectBind.fbn) {
				var binaryString = Math.round(+signal.value).toString(2);
				var bit6 = binaryString.slice(-7,-6) === "1" ? true : false;
				var bit7 = binaryString.slice(-8,-7) === "1" ? true : false;
				var bit8 = binaryString.slice(-9,-8) === "1" ? true : false;
				this.comp.setAttribute("Visibility", bit6 || bit7 || bit8 ? "Visible" : "Hidden");
			}
		}
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
        <Component Clip="False" ContentHeight="40.0"
            ContentWidth="100.0" Fill="#F0080E" Height="40.0" Id="SFan"
            Left="640.0" Name="" Stroke="#FFD100" Top="290.0"
            Type="Digital Output" Version="2.0" Visibility="Hidden" Width="100.0">
            <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
            <Expose ExposedAttribute="Stroke" Name="ForcedColor"/>
            <Group Name="binds">
                <Bind Description="ValueBind" Name="FanCmd">
                    <Expose ExposedAttribute="Name" Name="ValueBind"/>
                </Bind>
                <Bind Description="PriBind" DynamicUpdates="Enable" Name="FanCmd.Priority8">
                    <Expose ExposedAttribute="Name" Name="PriorityBind"/>
                </Bind>
                <Bind Name="AppSelect" PreventDefault="True"/>
            </Group>
            <Group Name="display">
                <Rectangle Fill="None" Height="20.0" Left="0.0"
                    Name="background" RadiusX="5" RadiusY="5"
                    Stroke="#626469" StrokeDashArray="0.0"
                    StrokeWidth="1.0" Top="20" Width="100.0">
                    <LinearGradient EndPoint="0,1">
                        <GradientStop Color="#FEFEFE" Offset="0"/>
                        <GradientStop Color="#DFE0E2" Offset="1.0"/>
                    </LinearGradient>
                </Rectangle>
                <Component Clip="False" ContentHeight="20.0"
                    ContentWidth="100.0" Height="20.0" Left="-30"
                    Name="Text" Top="0.0" Width="100.0">
                    <Group Name="display">
                        <Rectangle Fill="None" Height="20.0" Left="0.0"
                            Name="background" RadiusX="0.0"
                            RadiusY="0.0" Stroke="None"
                            StrokeDashArray="0.0" StrokeWidth="1.0"
                            Top="0.0" Width="100.0"/>
                        <TextBox Fill="None" FontFamily="Arial"
                            FontSize="15.0" FontStyle="Normal"
                            FontWeight="Normal" Height="20.0"
                            HorizontalAlign="Center" Left="0.0"
                            Name="foreground" Stroke="#000000"
                            TextDecoration="None" Top="0.0"
                            VerticalAlign="Middle"
                                Width="160"><![CDATA[Series Fan]]><Expose
                                ExposedAttribute="Content" Name="Text Content"/>
                        </TextBox>
                    </Group>
                </Component>
                <Component Clip="False" Color="None"
                    ContentHeight="20.0" ContentWidth="100.0"
                    Decimals="1" Fill="#F0080E" Height="20.0" Left="0.0"
                    Name="Value" State0="Stop" State1="Start"
                    Stroke="#FFD100" Top="20.0" Units="%" Width="100.0">
                    <Expose ExposedAttribute="State0" Name="State0"/>
                    <Expose ExposedAttribute="State1" Name="State1"/>
                    <TextBox Fill="None" FontFamily="Arial"
                        FontSize="15.0" FontStyle="Normal"
                        FontWeight="Normal" Height="20.0"
                        HorizontalAlign="Center" Left="0.0"
                        Name="ValueText" Stroke="#000000"
                        TextDecoration="None" Top="0.0"
                        VerticalAlign="Middle"
                            Width="100.0"><![CDATA[---]]><Expose
                            ExposedAttribute="Content" Name="Point Content"/>
                    </TextBox>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="0"
                    Name="ForcedImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#FFD100" Height="20" RadiusX="5"
                        RadiusY="5" Stroke="None" Width="20">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#FFD100" To="None">
                            <Expose ExposedAttribute="From" Name="ForcedColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="ForcedColor"/>
                    </Rectangle>
                    <Component Clip="False" ContentHeight="10.1"
                        ContentWidth="15.0" Height="10.1" Left="4"
                        Top="5" Width="15.0">
                        <Path Fill="#E3BC67" Name="B1"
                            PathData="M11.25,10.096130000000017 C12.980770399999997,10.096130000000017 12.6923101,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849399999999,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576710000000276 12.403849399999999,6.0576710000000276 12.980770399999997,6.0576710000000276 12.980770399999997,6.0576710000000276 13.557690399999999,6.0576710000000276 15.0,6.0576710000000276 15.0,4.0384409999999775 13.557690399999999,4.0384409999999775 12.980770399999997,4.0384409999999775 12.6923101,4.0384409999999775 12.115386999999998,4.0384409999999775 13.557690399999999,4.0384409999999775 13.557690399999999,2.0192109999999843 12.115386999999998,2.0192109999999843 9.51923,2.0192109999999843 9.51923,2.0192109999999843 7.2115399999999994,2.0192109999999843 8.6538473000000025,2.0192109999999843 8.6538473000000025,-1.900000000887303E-5 7.2115399999999994,-1.900000000887303E-5 5.76923,-1.900000000887303E-5 4.6153800000000018,-1.900000000887303E-5 3.4615399999999994,0.28844099999997752 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040600999999981 1.1538473000000025,1.7307500000000005 0.725049300000002,2.0655100000000175 0.20812709999999868,2.382092 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.5192109999999843 0.33908739999999682,10.067859999999996 1.1538473000000025,10.096130000000017 1.7307703999999973,10.096130000000017 4.9038473000000025,10.096130000000017 8.6538473000000025,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192109999999843 L5.4807703999999973,2.0192109999999843 M12.115386999999998,4.0384409999999775 L8.3653800000000018,4.0384409999999775 M12.403849399999999,6.0576710000000276 L8.3653800000000018,6.0576710000000276 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5"/>
                        <Path Fill="#FFFFFF"
                            PathData="M11.25,10.096130000000017 C12.9807706,10.096130000000017 12.692310200000001,8.0769000000000233 11.25,8.0769000000000233 11.826920000000001,8.0769000000000233 11.826920000000001,8.0769000000000233 12.403849600000001,8.0769000000000233 13.846150000000002,8.0769000000000233 13.846150000000002,6.0576730000000225 12.403849600000001,6.0576730000000225 12.9807706,6.0576730000000225 12.9807706,6.0576730000000225 13.5576906,6.0576730000000225 15.0,6.0576730000000225 15.0,4.0384429999999725 13.5576906,4.0384429999999725 12.9807706,4.0384429999999725 12.692310200000001,4.0384429999999725 12.115388000000003,4.0384429999999725 13.5576906,4.0384429999999725 13.5576906,2.0192129999999793 12.115388000000003,2.0192129999999793 9.51923,2.0192129999999793 9.51923,2.0192129999999793 7.2115399999999994,2.0192129999999793 8.6538474999999977,2.0192129999999793 8.6538474999999977,-1.7000000013922545E-5 7.2115399999999994,-1.7000000013922545E-5 5.76923,-1.7000000013922545E-5 4.6153800000000018,-1.7000000013922545E-5 3.4615399999999994,0.28844299999997247 2.3809600000000017,0.58771999999999025 2.0376899999999978,1.040602999999976 1.1538474999999977,1.7307500000000005 0.72504949999999724,2.0655100000000175 0.20812730000000101,2.382093999999995 0.0,2.8845900000000029 0.0,5.1922799999999825 0.0,7.2115099999999757 0.0,9.51921299999998 0.33908759999999916,10.067859999999996 1.1538474999999977,10.096130000000017 1.7307705999999996,10.096130000000017 4.9038474999999977,10.096130000000017 8.6538474999999977,10.096130000000017 11.25,10.096130000000017 M7.2115399999999994,2.0192129999999793 L5.4807706,2.0192129999999793 M12.115388000000003,4.0384429999999725 L8.3653800000000018,4.0384429999999725 M12.403849600000001,6.0576730000000225 L8.3653800000000018,6.0576730000000225 M11.25,8.0769000000000233 L8.3653800000000018,8.0769000000000233"
                            Stroke="#505050" StrokeDashArray="0.0" StrokeWidth=".5">
                            <LinearGradient Attribute="Fill"
                                EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                                <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                                <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                                <GradientStop Color="#60000000" Offset="1.0"/>
                            </LinearGradient>
                        </Path>
                    </Component>
                </Component>
                <Component Clip="False" ContentHeight="20"
                    ContentWidth="20" Height="20.0" Left="80"
                    Name="AlarmImage" Top="20" Visibility="Hidden" Width="20.0">
                    <Rectangle Fill="#F0080E" Height="20.0" Left="0"
                        RadiusX="5" RadiusY="5" Stroke="None" Top="0" Width="20.0">
                        <Animate Animation="Stop" Attribute="Fill"
                            Duration="1" From="#F0080E" To="None">
                            <Expose ExposedAttribute="From" Name="AlarmColor"/>
                        </Animate>
                        <Expose ExposedAttribute="Fill" Name="AlarmColor"/>
                    </Rectangle>
                    <Path Fill="#FFD100" Name="B1"
                        PathData="M11.8,15.15 C11.8,15.5640001 10.994,15.9 10.0,15.9 9.006,15.9 8.20000001,15.5640001 8.20000001,15.15 8.20000001,14.736 9.006,14.4 10.0,14.4 10.994,14.4 11.8,14.736 11.8,15.15 z M11.0,3.75 C11.0,4.164 10.55200001,4.5 10.0,4.5 9.448,4.5 9.0,4.164 9.0,3.75 9.0,3.336000001 9.448,3.0 10.0,3.0 10.55200001,3.0 11.0,3.336000001 11.0,3.75 z"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="8.199998259544" Opacity="1.0"
                        Stroke="#4B000000" StrokeDashArray="0.0"
                        StrokeWidth=".5" Top="14.399997115135" Width="3.60000014305115"/>
                    <Ellipse Fill="None" Height="1.50002274259486"
                        Left="9.0" Opacity="1.0" Stroke="#4B000000"
                        StrokeDashArray="0.0" StrokeWidth=".5" Top="3.0" Width="2.0"/>
                    <Curve Fill="#FFD100" Name="B2" Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#FFD100" StrokeDashArray="0.0" StrokeWidth=".5"/>
                    <Curve Opacity="1.0"
                        Points="10.0,15.0 11.500100146817,15.0 15.100154729045,15.0 16.0,14.399997115135 16.0,13.799997091293 16.0,13.500148719784 15.399998545647,12.59999704361 14.500145632008,11.70012142867 14.500145632008,11.100112331632 14.199998497963,9.59999692439999 13.900136534969,7.79999685287498 13.30012743793,5.700030458291 11.799998402596,4.19999670982401 11.500100146817,3.90000316717698 10.632542525376,3.59999668598198 10.0,3.59999668598198 9.367612283068,3.59999668598198 8.500054661628,3.90000316717698 8.199998259544,4.19999670982401 6.70002737051399,5.39999675750698 6.100018273475,7.79999685287498 5.799998164177,9.59999692439999 5.500009176437,11.100112331632 5.500009176437,11.70012142867 4.599998116493,12.59999704361 4.0,13.500148719784 4.0,13.799997091293 4.0,14.399997115135 5.199998140335,15.0 8.500054661628,15.0 10.0,15.0"
                        Stroke="#5F000000" StrokeDashArray="0.0" StrokeWidth=".5">
                        <LinearGradient Attribute="Fill"
                            EndPoint="1.0,0.0" SpreadMethod="Pad" StartPoint="0.0,0.0">
                            <GradientStop Color="#ABFFFFFF" Offset="0.0"/>
                            <GradientStop Color="#01FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#60000000" Offset="1.0"/>
                        </LinearGradient>
                    </Curve>
                </Component>
            </Group>
            <TargetArea Height="40" Left="0" Top="0" Width="100"/>
            <Script OnDocumentLoad="load" OnMouseClick="click"
                OnMouseDown="" OnMouseMove="" OnMouseOut=""
                OnMouseOver="" OnMouseUp="" OnSignalChange="change"><![CDATA[// Global variable used for timeout and interval callbacks
var that;

/**==========================================================================================
 * Main Immediate Function
 */
var Main = (function() {
	var Mouse,				// Mouse event handler
		o;					// Main Object
		
	var load = function(component) {				
		//initialize the object
		o = Object.construct(Point, component);
	}
	
	// change event handler
	var change = function(signal) {
		// send signal change to object
		o.update(signal);
	}
	
	var toggleUpdate = function() {
		o.toggleUpdate();
	}
	
	var relinquish = function() {
		o.relinquish();
	}
	
	var getForced = function() {
		return o.forced;
	}
	
	// create main function interface
	return {
		load: load,
		change: change,
		toggleUpdate: toggleUpdate,
		relinquish: relinquish,
		getForced: getForced
	}
}());

/**==========================================================================================
 * Event Callback Functions
 */

function load(evt){	
	Main.load(evt.getCurrentTarget());
}

function change(evt) {	
	evt.preventDefault();
	Main.change({fbn: evt.getTarget().getFullBindName(), value: evt.getValue()});
}

function click(evt) {
	var timeOutId = setTimeout("Main.toggleUpdate()","10000");
	if(+evt.getButton() === 2 && Main.getForced()) {
		evt.preventDefault();
		Main.relinquish();
	}
}

/**==========================================================================================
 * Helper Functions
 */
if (!Object.create) {
	Object.create = function(base) {
		function F () {};
		F.prototype = base;
		return new F();
	};
}

if (!Object.construct) {
	Object.construct = function(base) {
		var instance = Object.create(base);
		if (instance.init) {
			instance.init.apply(instance, [].slice.call(arguments, 1));
		}
		return instance;
	};
}

function isUndefined(o) {
	if(typeof(o) === "undefined") {
		return true;			
	}
	return false;	
}

function getBool(s) {
	var trueEnum = ["yes", "y", "Yes", "Y", "1", "True", "true", "T", "t", "On", "active"];
	var i = trueEnum.length;
	while(i--) {
		if(String(s) === trueEnum[i]) {
			return true;
		}
	}
	return false
}

/**==========================================================================================
 * Point Object
 */
Point = {
	init: function(comp) {
		this.comp = comp;
		// declare and reset forced value
		this.forced = false;
		
		// get operation of component
		this.pointType = "";
		this.commandType = "";
		this.override = false;
		if(comp.hasAttribute("Type")) {	
			var type = String(comp.getAttribute("Type"));
			this.pointType = type.split(" ")[0];
			this.commandType = type.split(" ")[1];
		}

		if(comp.hasAttribute("Override")) {
			this.override = getBool(comp.getAttribute("Override"));	
		}
		
		// construct type of value based on component operation
		var display = comp.getChildByName("display");
		var valueNode = display.getChildByName("Value");
		if(display) {			
			switch(this.pointType) {
			case "Analog":
				this.text = Object.construct(Analog, valueNode);
				break;
			case "Digital":
				this.text = Object.construct(Digital, valueNode);
				break;
			case "Multi":
				this.text = Object.construct(Multi, valueNode);
				break;
			case "Enum":
				this.text = Object.construct(Enum, valueNode);
				break;
			default:
				this.text = Object.construct(Text, valueNode);
				break;				
			}
			
			// create the other pieces of the display
			this.alarmIcon = Object.construct(Icon, display.getChildByName("AlarmImage"));
			this.forcedIcon = Object.construct(Icon, display.getChildByName("ForcedImage"));
			
			var alarmColor = comp.getAttribute("Fill");
			var forcedColor = comp.getAttribute("Stroke");
					
			this.background = Object.construct(BgdRect, display.getChildByName("background"), alarmColor, forcedColor);
		}
		
		// build the binds needed
		var bindGroup = comp.getChildByName("binds");
		if(bindGroup) {
			var bindList = bindGroup.getElementsByTagName("Bind");
			var i = bindList.length;			
			while(i--) {
				var child = bindList.item(i);
				var description = String(child.getAttribute("Description"));
				if(description === "ValueBind"){
					this.valueBind = Object.construct(Bind, child);
				}
				if(description === "AlarmBind"){
					this.alarmBind = Object.construct(Bind, child);
				}
				if(description === "PriBind"){
					this.priBind = Object.construct(Bind, child);
				}
				if(description === "OOSBind"){
					this.OOSBind = Object.construct(Bind, child);
				}
				if(String(child.getAttribute("Name")) === "AppSelect") {
					this.selectBind = Object.construct(Bind, child);
				}
			}
		}
		
		// set the forced indication bind Inputs -> Out of Service, Outputs -> Priority Bind
		if(this.commandType === "Input") {
			if(this.OOSBind) {
				this.indicationBind = this.OOSBind;
			}
		} else {
			if(this.priBind) {
				this.indicationBind = this.priBind;
			}
		}
		
		if(this.indicationBind) {
			this.indicationBind.disableUpdates();
			var parent = comp.getParentNode();
			var children = parent.getChildNodes();
			var i = children.length;
			while(i--) {
				if(children.item(i) === comp) {
					var delay = (i + 5) * 2000;
				}
			}
			that = this;
			this.timeoutId = setTimeout("that.toggleUpdate()", delay);
		}
		
		
		if(this.alarmBind) {
			// store object reference globally for broken callback
			this.alarmBind.disableUpdates();
			that = this;
			this.intervalId = setInterval("that.checkAlarm()", 30000);
		}
		this.startDate = new Date();
	},
	
	update: function(signal) {		
		// handle value update
		if(signal.fbn === this.valueBind.fbn) {
			this.text.update(signal.value);
			var now = new Date();
			if(Math.abs(now - this.startDate) > 30000) {
				this.toggleUpdate();
			}
		}	
		
		// handle alarm update
		if(this.alarmBind) {
			if(signal.fbn === this.alarmBind.fbn) {
				var alarmVal = +signal.value
				if(+signal.value === 0) {
					this.alarmIcon.update(false);
					this.background.update({alarm: false});	
				} else {
					this.alarmIcon.update(true);
					this.background.update({alarm: true});
				}
			}
		}
		
		if(this.priBind) {
			// disable priority 10 after initial update
			if(signal.fbn === this.priBind.fbn) {
				if(this.commandType === "Input") {
					this.priBind.disableUpdates();
				} else {
					if(signal.value === null) {
						this.forced = false;
					} else {
						this.forced = true;
					}
				}			
			}
		}
		
		if(this.OOSBind) {
			// handle Out of Service change for forced indication
			if(signal.fbn === this.OOSBind.fbn) {
				if(this.commandType === "Input") {
					if(getBool(signal.value) === false){
						this.forced = false;		
					} else if(getBool(signal.value) === true) {
						this.forced = true;	
					}
				} else {
					this.OOSBind.disableUpdates();
				}
			}			
		}	
		
		if(this.selectBind) {
			if(signal.fbn === this.selectBind.fbn) {
				var binaryString = Math.round(+signal.value).toString(2);
				this.comp.setAttribute("Visibility", binaryString.slice(-3,-2) === "1" ? "Visible" : "Hidden");
			}
		}
		
		// update forced indications
		this.forcedIcon.update(this.forced);
		this.background.update({forced: this.forced});		
	},	
	toggleUpdate: function() {
		this.indicationBind.enableUpdates();				// enable Out Of Service Polling
		that = this;
		var disableID = setTimeout("that.indicationBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	checkAlarm: function() {
		this.alarmBind.enableUpdates();
		that = this;
		var disableID = setTimeout("that.alarmBind.disableUpdates()", 1500);	//disable Out of Service Polling after 1.5 seconds 3 polls
	},
	relinquish: function() {
		if(this.indicationBind) {
			if(this.priBind) {
				this.priBind.relinquish();
			} else if(this.OOSBind) {
				this.OOSBind.write(false);
			}
		}
	}
};

/**==========================================================================================
 * Analog Object
 */
Analog = {
	init: function(node) {
		this.decs = 0;
		this.units = "";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			if(node.hasAttribute("Decimals")) {		
				this.decs = +node.getAttribute("Decimals");
			}			
			if(node.hasAttribute("Units")) {		
				this.units = String(node.getAttribute("Units"));
			}
		}
		
		this.content = "--- " + this.units;
	},
	update: function(val) {
		var value = +val;
		this.content = value.toFixed(this.decs) + " " + this.units;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Digital Object
 */
Digital = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 2;
			while(i--) {
				this.states[i] = String(node.getAttribute("State" + i));
			}
		}
	},
	update: function(val) {		
		this.content = getBool(val) ? this.states[1] : this.states[0];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Multi Object
 */
Multi = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 1;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Enum Object
 */
Enum = {
	init: function(node) {
		this.states = [];
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
				
			i = 0;
			while(node.hasAttribute("State" + i)) {
				this.states[i] = String(node.getAttribute("State" + i));
				i += 1;
			}
		}		
	},
	update: function(val) {
		this.content = this.states[+val];
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Text Object
 */
Text = {
	init: function(node) {
		this.content = "---";
		
		if(node) {
			this.text = node.getChildByName("ValueText");
		}		
	},
	update: function(val) {
		this.content = val;
		this.render();
	},
	render: function() {
		if(this.text) {		
			this.text.setAttribute("Content", this.content);
		}
	}
};

/**==========================================================================================
 * Bind Object
 */
Bind = {
	init: function(node) {
		this.node = node;
		if(this.node) {
			this.fbn = this.node.getFullBindName();
		}
	},
	enableUpdates: function(){
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Enable");
			}
		}
		catch(err) {
		}
	},
	disableUpdates: function() {
		try {
			if(this.node) {
				this.node.setAttribute("DynamicUpdates", "Disable");
			}
		}
		catch(err) {
		}
	},
	displayProperties: function() {
		if(this.fbn) {
			invoke(this.fbn,"EditProperties");
		}
	},
	relinquish: function() {
		try {
			if(this.fbn) {
				setValue(this.fbn,null);	
			}
		}
		catch(err) {
		}
	},
	write: function(val) {
		try {
			if(this.fbn) {
				setValue(this.fbn, val);
			}
		}
		catch(err) {
		}
	}
};

/**==========================================================================================
 * Icon Object
 */
 
Icon = {
	init: function(node) {
		this.node = node;
		this.visibility = "Hidden";
		if(this.node) {
			var bgd = this.node.getElementsByTagName("Rectangle").item(0);
			if(bgd) {
				this.animate = Object.construct(Animate, bgd.getElementsByTagName("Animate").item(0));
			}
		}
	},
	update: function(val) {
		this.visibility = val ? "Visible" : "Hidden";
		this.animate.update({animation: val ? "Start" : "Stop"});
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Visibility", this.visibility);
		}
	}
}

/**==========================================================================================
 * Background Rectangle Object
 */
 
BgdRect = {
	init: function(node, alarmColor, forcedColor) {
		if(node) {
			if(node.hasAttribute("Stroke")) {
				this.normalColor = node.getAttribute("Stroke");
			}
			this.forcedColor = forcedColor;
			this.alarmColor = alarmColor;
		
			this.currentColor = this.normalColor;
			this.currentWidth = 1;
		
			this.forced = false;
			this.alarm = false;
			this.rect = Object.construct(Rectangle, node);
		}
	},
	update: function(status) {
		if(status.hasOwnProperty("forced")) {
			this.forced = status.forced;
		}
		if(status.hasOwnProperty("alarm")) {
			this.alarm = status.alarm;
		}
		
		this.currentColor = this.normalColor;
		this.currentWidth = 1;

		if(this.forced) {
			this.currentColor = this.forcedColor;
			this.currentWidth = 2;
		}
		if(this.alarm) {
			this.currentColor = this.alarmColor;
			this.currentWidth = 2;
		}
		if(this.rect) {
			this.rect.update({stroke: this.currentColor, strokeWidth: this.currentWidth});
		}
	}
}

/**==========================================================================================
 * Animate Object
 */
Animate = {
	init: function(node) {
		this.node = node;
		this.animation = this.node.getAttribute("Animation");
	},
	update: function(props) {
		this.animation = props.animation || this.animation || "Stop";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Animation", this.animation);
		}
	}
}

/**==========================================================================================
 * Rectangle Object
 */
Rectangle = {
	init: function(node) {
		this.node = node;
		this.stroke = this.node.getAttribute("Stroke");
		this.strokeWidth = this.node.getAttribute("StrokeWidth");
	},
	update: function(props) {
		this.stroke = props.stroke || this.stroke || "#626469";
		this.strokeWidth = props.strokeWidth || this.strokeWidth || "1";
		this.render();
	},
	render: function() {
		if(this.node) {
			this.node.setAttribute("Stroke", this.stroke);
			this.node.setAttribute("StrokeWidth", this.strokeWidth);
		}
	}
};]]></Script>
        </Component>
    </Layer>
</Tgml>
